buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
group = "vazkii.psi" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

repositories {
    maven {
        // for AutoRegLib
        name "blamejared"
        url "http://maven.blamejared.com/"
    }
    maven { url = "http://dvs1.progwml6.com/files/maven" }
}

dependencies {
    compile "vazkii.autoreglib:AutoRegLib:${config.arl_version}"
    compile "mezz.jei:jei_${config.mc_version}:${config.jei_version}:api"
    runtime "mezz.jei:jei_${config.mc_version}:${config.jei_version}"
}

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "eclipse/assets"

    mappings = config.mc_mappings
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'LibMisc.java' //I may have missed another file, though I can only find it in here.
    makeObfSourceJar = false
}

//This here is for SCP
repositories {
    mavenCentral()
}
configurations {
    sshAntTask
}

//End of the SCP config

dependencies {
    sshAntTask "org.apache.ant:ant-jsch:1.7.1", "jsch:jsch:0.1.29"
}

jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': config.mc_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/psd/**'
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

artifacts {
    archives deobfJar
}
/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber {
    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
        config.toProperties().store(it, "")
    }

    file('web/versions.ini').append("\n${version}=${minecraft.version}")
    file("${config.dir_repo}/version/${minecraft.version}.txt").write("${version}")
}

// I have no idea what I'm doing
task wtfGradle2(type: Copy) {
    from(jar.destinationDir)
    into file("${config.dir_output}/wtf")
}

// Seriously, I'm desperate to make this work
task wtfGradle1(type: Delete) {
    dependsOn "wtfGradle2"
    delete "${config.dir_output}/wtf/${deobfJar.archiveName}"
}

task output(type: Copy) {
    dependsOn "wtfGradle1"
    from(jar.destinationDir)
    into file(config.dir_output)
}

task outputDeobf(type: Copy) {
    dependsOn "output"
    from(config.dir_output) {
        include deobfJar.archiveName
    }
    into file("${config.dir_output}/deobf")
}

task sort(type: Delete) {
    dependsOn "outputDeobf"
    delete "${config.dir_output}/${deobfJar.archiveName}", "${config.dir_output}/wtf"
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

defaultTasks 'clean', 'build', 'sort', 'incrementBuildNumber'
