# MISC
itemGroup.Psi=Psi

psimisc.componentType=&aComponent Type&7: %s
psimisc.shiftForInfo=&7Hold &bSHIFT&7 for more info
psimisc.none=(none)
psimisc.stats=Stats
psimisc.socketing=Socketing
psimisc.keybind=Psi Master Keybind
psimisc.spellSelected=&dSpell Selected&7: %s
psimisc.name=Name:
psimisc.compiled=Compilation Successful
psimisc.errored=Compilation Errored
psimisc.weakCad=Your CAD's Stats are too weak to cast this Spell.
psimisc.constant=Constant
psimisc.nextPage=Next Page
psimisc.prevPage=Previous Page
psimisc.config=Config
psimisc.notYourProgrammer=It seems like someone else is using this. Probably better not to mess with it. 
psimisc.cantUseProgrammer=You have no idea how to operate this.
psimisc.levelDisplay=Level %d
psimisc.levelInfo=Level %d - Level Points: %d
psimisc.levelInfoCreative=Level %d (Creative) - Level Points: %d
psimisc.locked=Locked
psimisc.requirements=Requirements
psimisc.learn=Learn
psimisc.levelup=Level Up
psimisc.wip=Psi Beta | Not final!
psimisc.bulletType=&bType&7: %s
psimisc.bulletCost=&bCost Multiplier&7: %s%%
psimisc.levelUpInfo1=You got 1 Level Point
psimisc.levelUpInfo2=Unequip your CAD and press [%s] to use it!

# BLOCK NAMES
tile.psi:cadAssembler.name=CAD Assembler
tile.psi:programmer.name=Spell Programmer

# ITEM NAMES
item.psi:psidust.name=Psidust
item.psi:psimetal.name=Psimetal Ingot
item.psi:psigem.name=Psigem
item.psi:ebonyPsimetal.name=Ebony Psimetal Ingot
item.psi:ivoryPsimetal.name=Ivory Psimetal Ingot
item.psi:cad.name=Casting Assistant Device
item.psi:cadAssemblyIron.name=Iron CAD Assembly
item.psi:cadAssemblyGold.name=Gold CAD Assembly
item.psi:cadAssemblyPsimetal.name=Psimetal CAD Assembly
item.psi:cadAssemblyEbonyPsimetal.name=Ebony Psimetal CAD Assembly
item.psi:cadAssemblyIvoryPsimetal.name=Ivory Psimetal CAD Assembly
item.psi:cadAssemblyCreative.name=Creative CAD Assembly
item.psi:cadCoreBasic.name=Basic CAD Core
item.psi:cadCoreOverclocked.name=Overclocked CAD Core
item.psi:cadCoreConductive.name=Conductive CAD Core
item.psi:cadCoreHyperclocked.name=Hyperclocked CAD Core
item.psi:cadCoreRadiative.name=Radiative CAD Core
item.psi:cadSocketBasic.name=Basic CAD Socket
item.psi:cadSocketSignaling.name=Signaling CAD Socket
item.psi:cadSocketLarge.name=Large CAD Socket
item.psi:cadSocketTransmissive.name=Transmissive CAD Socket
item.psi:cadSocketHuge.name=Huge CAD Socket
item.psi:cadBatteryBasic.name=Basic CAD Battery
item.psi:cadBatteryExtended.name=Extended CAD Battery
item.psi:cadBatteryUltradense.name=Ultradense CAD Battery
item.psi:cadColorizerWhite.name=White CAD Colorizer
item.psi:cadColorizerOrange.name=Orange CAD Colorizer
item.psi:cadColorizerMagenta.name=Magenta CAD Colorizer
item.psi:cadColorizerLightBlue.name=Light Blue CAD Colorizer
item.psi:cadColorizerYellow.name=Yellow CAD Colorizer
item.psi:cadColorizerLime.name=Lime CAD Colorizer
item.psi:cadColorizerPink.name=Pink CAD Colorizer
item.psi:cadColorizerGray.name=Gray CAD Colorizer
item.psi:cadColorizerSilver.name=Light Gray CAD Colorizer
item.psi:cadColorizerCyan.name=Cyan CAD Colorizer
item.psi:cadColorizerPurple.name=Purple CAD Colorizer
item.psi:cadColorizerBlue.name=Blue CAD Colorizer
item.psi:cadColorizerBrown.name=Brown CAD Colorizer
item.psi:cadColorizerGreen.name=Green CAD Colorizer
item.psi:cadColorizerRed.name=Red CAD Colorizer
item.psi:cadColorizerBlack.name=Black CAD Colorizer
item.psi:cadColorizerRainbow.name=Full-Spectrum CAD Colorizer
item.psi:cadColorizerGolden.name=Golden CAD Colorizer
item.psi:spellBullet.name=Spell Bullet
item.psi:spellBulletActive.name=Programmed Spell Bullet
item.psi:spellBulletProjectile.name=Projectile Spell Bullet
item.psi:spellBulletProjectileActive.name=Programmed Projectile Spell Bullet
item.psi:spellBulletLoop.name=Loopcast Spell Bullet
item.psi:spellBulletLoopActive.name=Programmed Loopcast Spell Bullet
item.psi:spellBulletCircle.name=Circle Spell Bullet
item.psi:spellBulletCircleActive.name=Programmed Circle Spell Bullet

# DEATH MESSAGES
death.attack.psi-overload=%s overflowed their Psionic Energy

# COMPONENT NAMES
psi.component.assembly=Assembly
psi.component.core=Core
psi.component.socket=Socket
psi.component.battery=Battery
psi.component.dye=Colorizer

# CAD STAT NAMES
psi.cadstat.efficiency=Efficiency
psi.cadstat.potency=Potency
psi.cadstat.complexity=Complexity
psi.cadstat.projection=Projection
psi.cadstat.bandwidth=Bandwidth
psi.cadstat.sockets=Sockets
psi.cadstat.overflow=Overflow

# SPELL STAT NAMES
psi.spellstat.complexity=Complexity
psi.spellstat.complexity.desc=Amount of actions
psi.spellstat.potency=Potency
psi.spellstat.potency.desc=Power of the spell
psi.spellstat.cost=Cost
psi.spellstat.cost.desc=Psi cost on casting
psi.spellstat.projection=Projection
psi.spellstat.projection.desc=Amount of tricks
psi.spellstat.bandwidth=Bandwidth
psi.spellstat.bandwidth.desc=Spell width or height (largest)

# BULLET TYPES
psi.bulletType0=Normal
psi.bulletType1=Projectile
psi.bulletType2=Loopcast
psi.bulletType3=Spell Circle

# SPELl PIECE NAMES
# -- SELECTORS
psi.spellpiece.selectorCaster=Selector: Caster
psi.spellpiece.selectorCaster.desc=Selects the person casting the spell
psi.spellpiece.selectorFocalPoint=Selector: Focal Point
psi.spellpiece.selectorFocalPoint.desc=Selects the Focal Point Entity of this spell
psi.spellpiece.selectorNearbyItems=Selector: Nearby Items
psi.spellpiece.selectorNearbyItems.desc=Selects items near the given position
psi.spellpiece.selectorNearbyLiving=Selector: Nearby Living
psi.spellpiece.selectorNearbyLiving.desc=Selects living beings near the given position
psi.spellpiece.selectorNearbyEnemies=Selector: Nearby Enemies
psi.spellpiece.selectorNearbyEnemies.desc=Selects enemies near the given position
psi.spellpiece.selectorNearbyAnimals=Selector: Nearby Animals
psi.spellpiece.selectorNearbyAnimals.desc=Selects animals near the given position
psi.spellpiece.selectorLoopcastIndex=Selector: Loopcast Index
psi.spellpiece.selectorLoopcastIndex.desc=Selects the amount of loopcast executions done

# -- OPERATORS
psi.spellpiece.operatorSum=Operator: Sum
psi.spellpiece.operatorSum.desc=A + B (+ C)
psi.spellpiece.operatorSubtract=Operator: Subtract
psi.spellpiece.operatorSubtract.desc=A - B (- C)
psi.spellpiece.operatorMultiply=Operator: Multiply
psi.spellpiece.operatorMultiply.desc=A * B (* C)
psi.spellpiece.operatorDivide=Operator: Divide
psi.spellpiece.operatorDivide.desc=A / B
psi.spellpiece.operatorAbsolute=Operator: Absolute
psi.spellpiece.operatorAbsolute.desc=Calculates the absolute value of a number
psi.spellpiece.operatorInverse=Operator: Inverse
psi.spellpiece.operatorInverse.desc=Calculates a number's inverse
psi.spellpiece.operatorModulus=Operator: Modulus
psi.spellpiece.operatorModulus.desc=A % B (Integer)
psi.spellpiece.operatorIntegerDivide=Operator: Integer Divide
psi.spellpiece.operatorIntegerDivide.desc=A / B (Integer)

psi.spellpiece.operatorEntityPosition=Operator: Entity Position
psi.spellpiece.operatorEntityPosition.desc=Gets an Entity's position
psi.spellpiece.operatorEntityLook=Operator: Entity Look
psi.spellpiece.operatorEntityLook.desc=Gets an Entity's look vector
psi.spellpiece.operatorEntityMotion=Operator: Entity Motion
psi.spellpiece.operatorEntityMotion.desc=Gets an Entity's motion vector
psi.spellpiece.operatorEntityAxialLook=Operator: Entity Axial Look
psi.spellpiece.operatorEntityAxialLook.desc=Gets an Entity's look vector, aligned to an axis
psi.spellpiece.operatorVectorRaycast=Operator: Vector Raycast
psi.spellpiece.operatorVectorRaycast.desc=Gets a localized raycast's result (max 32)
psi.spellpiece.operatorVectorRaycastAxis=Operator: Vector Axis Raycast
psi.spellpiece.operatorVectorRaycastAxis.desc=Gets a localized raycast's side axis (max 32)
psi.spellpiece.operatorVectorSum=Operator: Vector Sum
psi.spellpiece.operatorVectorSum.desc=A + B (+ C)
psi.spellpiece.operatorVectorSubtract=Operator: Vector Subtract
psi.spellpiece.operatorVectorSubtract.desc=A - B (- C)
psi.spellpiece.operatorVectorMultiply=Operator: Vector Multiply
psi.spellpiece.operatorVectorDivide=Operator: Vector Divide
psi.spellpiece.operatorVectorDivide.desc=A / B
psi.spellpiece.operatorVectorCrossProduct=Operator: Vector Cross Product
psi.spellpiece.operatorVectorCrossProduct.desc=A x B
psi.spellpiece.operatorVectorNormalize=Operator: Vector Normalize
psi.spellpiece.operatorVectorNormalize.desc=Normalizes a Vector so its magnitude is 1
psi.spellpiece.operatorVectorNegate=Operator: Vector Negate
psi.spellpiece.operatorVectorNegate.desc=Negates a vector
psi.spellpiece.operatorVectorMagnitude=Operator: Vector Magnitude
psi.spellpiece.operatorVectorMagnitude.desc=Gets a vector's Magnitude
psi.spellpiece.operatorVectorConstruct=Operator: Vector Construct
psi.spellpiece.operatorVectorConstruct.desc=Constructs a Vector from XYZ parameters
psi.spellpiece.operatorVectorExtractX=Operator: Vector Extract X
psi.spellpiece.operatorVectorExtractX.desc=Extracts the X coordinate from a Vector
psi.spellpiece.operatorVectorExtractY=Operator: Vector Extract Y
psi.spellpiece.operatorVectorExtractY.desc=Extracts the Y coordinate from a Vector
psi.spellpiece.operatorVectorExtractZ=Operator: Vector Extract Z
psi.spellpiece.operatorVectorExtractZ.desc=Extracts the Z coordinate from a Vector
psi.spellpiece.operatorVectorProject=Operator: Vector Project
psi.spellpiece.operatorVectorProject.desc=Projects Vector A onto Vector B
psi.spellpiece.operatorClosestToPoint=Operator: Closest to Point
psi.spellpiece.operatorClosestToPoint.desc=Gets the closest entity in a list to a point 
psi.spellpiece.operatorRandomEntity=Operator: Random Entity
psi.spellpiece.operatorRandomEntity.desc=Gets a random entity from a list

# -- CONSTANTS
psi.spellpiece.constantNumber=Constant: Number
psi.spellpiece.constantNumber.desc=Select and type to set value

# -- OTHERS
psi.spellpiece.connector=Connector
psi.spellpiece.connector.desc=Connects stuff and things
psi.spellpiece.errorSuppressor=Error Suppressor
psi.spellpiece.errorSuppressor.desc=Suppresses errors thrown by the spell

# -- TRICKS
psi.spellpiece.trickDebug=Trick: Debug
psi.spellpiece.trickDebug.desc=For testing. Prints out the target
psi.spellpiece.trickAddMotion=Trick: Add Motion
psi.spellpiece.trickAddMotion.desc=Adds motion to target Entity
psi.spellpiece.trickExplode=Trick: Explode
psi.spellpiece.trickExplode.desc=Goes boom
psi.spellpiece.trickBreakBlock=Trick: Break Block
psi.spellpiece.trickBreakBlock.desc=Breaks a block
psi.spellpiece.trickBreakInSequence=Trick: Break Block Sequence
psi.spellpiece.trickBreakInSequence.desc=Breaks a sequence of blocks defined by a Vector
psi.spellpiece.trickPlaceBlock=Trick: Place Block
psi.spellpiece.trickPlaceBlock.desc=Places a block (the one to the right of the CAD)
psi.spellpiece.trickPlaceInSequence=Trick: Place Block Sequence
psi.spellpiece.trickPlaceInSequence.desc=Places a sequence of blocks defined by a Vector
psi.spellpiece.trickInfusion=Trick: Infusion
psi.spellpiece.trickInfusion.desc=Infuses Gold into Psimetal
psi.spellpiece.trickBlink=Trick: Blink
psi.spellpiece.trickBlink.desc=Blinks forward
psi.spellpiece.trickMassBlink=Trick: Mass Blink
psi.spellpiece.trickMassBlink.desc=Blinks everybody forward
psi.spellpiece.trickMassAddMotion=Trick: Mass Add Motion
psi.spellpiece.trickMassAddMotion.desc=Adds motion to all entities in target Entity List
psi.spellpiece.trickMassExodus=Trick: Mass Exodus
psi.spellpiece.trickMassExodus.desc=Moves all entities in target Entity List to target position

# SPELL PARAMETER NAMES
psi.spellparam.target=Target
psi.spellparam.number=Number
psi.spellparam.number1=Number A
psi.spellparam.number2=Number B
psi.spellparam.number3=Number C
psi.spellparam.number4=Number D
psi.spellparam.vector1=Vector A
psi.spellparam.vector2=Vector B
psi.spellparam.vector3=Vector C
psi.spellparam.vector4=Vector D
psi.spellparam.position=Position
psi.spellparam.ray=Ray
psi.spellparam.max=Max
psi.spellparam.min=Min
psi.spellparam.power=Power
psi.spellparam.direction=Direction
psi.spellparam.speed=Speed
psi.spellparam.x=X
psi.spellparam.y=Y
psi.spellparam.z=Z
psi.spellparam.radius=Radius
psi.spellparam.distance=Distance

# DATA TYPE NAMES
psi.datatype.Null=None
psi.datatype.Any=Any
psi.datatype.Double=Number
psi.datatype.Integer=Number
psi.datatype.Number=Number
psi.datatype.Vector3=Vector
psi.datatype.Entity=Entity
psi.datatype.EntityLiving=Entity (Living)
psi.datatype.EntityPlayer=Entity (Player, Living)
psi.datatype.EntityListWrapper=Entity List

# COMPILER ERRORS
psi.spellerror.nospell=No Spell to compile
psi.spellerror.notricks=Spell has no Tricks
psi.spellerror.unsetparam=A required Parameter is not set
psi.spellerror.nullparam=A Parameter is facing an empty cell
psi.spellerror.invalidparam=A Parameter is facing an invalid piece
psi.spellerror.samesideparams=Two or more Parameters are sharing a side
psi.spellerror.loop=Can't resolve due to endless loop
psi.spellerror.nonpositivevalue=A Number Parameter that needs to be positive isn't

# RUNTIME ERRORS
psi.spellerror.dividebyzero=ERROR: Divide by zero.
psi.spellerror.nulltarget=ERROR: Spell Entity target is non existent.
psi.spellerror.nullvector=ERROR: Spell Operation Vector is non existent or null.
psi.spellerror.outsideradius=ERROR: Spell target is outside maximum 32 block radius.

# PIECE GROUPS
psi.introduction=Welcome to Psi, the best spell programming magic tech mod in this side of the universe. Please keep in mind that having Just Enough Items (JEI) or some other method of looking up recipes is essential for playing with Psi, as recipes are not included in this guide. In order to get started spellslinging, you'll need some Psidust. To get Psidust, you need to start by crafting a CAD Assembler and an Iron CAD Assembly. Place down the CAD Assembler and put the Iron CAD Assembly in it to construct a very barebones Casting Assistance Device (CAD). From there, drop some Redstone Dust in the world. Equip your CAD, point at the dropped items and right click to make your Psidust.
psi.piecegroup.tutorial1=Tutorial 1
psi.piecegroup.tutorial1.desc=Welcome to the leveling menu, it looks like you've gotten acquainted with your brand new CAD. This menu serves as your school for the mod, and this is your first tutorial! Don't worry, this is the longest one, as it has to teach you the basics. To get started programming spells you'll need a Spell Programmer. To run your spells, you'll also need a better CAD than the one you have right now, one with all the components. Look up all the various CAD components (Assembly, Core, Socket, Battery, and optionally, Colorizer) and create one. Spells also need to be put into Spell Bullets. Make yourself all of that stuff and let's get rolling.<br><br>After you're set with all you need. Open up your Spell Programmer by right clicking it. You'll see a large grid. This is where the magic happens. The programming system is less of a traditionally complex programming system, and more of a simple sequence of actions. To add a piece to the grid, right click any part of it, and select from the pieces that come up.<br><br>As you can see at the bottom, you have two available pieces. Once you have more, you'll be able to assemble them to create spells in a myriad of different ways, but for now, let's just focus on these two. The pieces you have available are the "Selector: Caster" and the "Trick: Debug". Tricks are the most important part of a spell, they are the means through which the spell interacts with the world. In our case, the Debug trick is an exception, as it just writes a value to the player's chat.<br><br>Start off by placing them in your grid adjacent to eachother. When you left click on your "Selector: Caster", you'll find that nothing special happens. However, when you do the same for your "Trick: Debug", a panel appears on the left where you can configure the inputs of this piece, the piece's "parameters". Parameters are info that goes to the piece, in order to allow it to do it's thing. Our Debug trick sends out something to chat, so we need to know what that thing is. Take the Target parameter, and click one of the arrows, so that your "Selector: Caster" looks like it's pointing towards the "Trick: Debug". If you hold Shift while looking at a piece, you can see what types of parameters it needs or what type it sends out. This is useful, so you can pair the right pieces together. Ignore the Number parameter for now, we'll cover it later.<br><br>If you've done this correctly, you should see the X on the top turns into a checkmark, and some values appear on the right. Don't worry about those for now. If you're still seeing the red X, hover over it to see what the error is and try to correct it.<br><br>Now we need to take the program you've made and send it over to your CAD. Grab your Spell Bullet and right click your Spell Programmer with it. You'll hear a beep boop, and are now ready to load the bullet. Place your new CAD into your Assembler, into the big slot on the top-left, and you'll see some slots below it open up. Place your bullet in there, then you can take your CAD out. To pick a spell, hold your CAD and hold the same key you use to access this menu.<br><br>In order to level up, you need to create and cast a spell that contains the piece highlighted in red on the last thing you've learned. In our case, we need a spell with a "Trick: Debug" to be able to level up. Right click your CAD with your bullet loaded and you should be ready to move on. If you want to create more Psidust, simply pick a slot that has no bullet in it.
psi.piecegroup.tutorial2=Tutorial 2
psi.piecegroup.tutorial2.desc=Let's talk about the "Number" parameter we saw last time. You'll notice that parameter has an extra option in the center. That means the parameter is optional. By selecting the center, you can disable it.<br><br>In our case, the "Number" parameter is simply a label of sorts, it can be useful if we have a more complex spell where we have multiple things being sent out to chat. It requires a Number, so let's give it one. We now have access to a "Constant: Number" piece. Add the "Number" parameter to your Debug piece and add a "Constant: Number" piece to your grid and connect it to your Debug piece. You can set the number by clicking on the piece and just typing the number with your keyboard.<br><br>Now that we're dealing with multiple parameters, you can assume that in a more complex grid, not everything will be adjacent just as it currently is. That's where Connectors, another piece introduced here, come in. Connectors do exactly as the name says, and allow a piece to connect to another, they're like a wire. You can put a connector adjacent to a piece, and it'll transfer whatever that piece contains to whatever is on the end of the connector. You can make connectors line up with other connectors if what you need is far away. A single connector line can send the object that points to it to any other pieces that are oriented to tap on to it.<br><br>Remember, to level up, you need to make a spell using the piece highlighted in red, so you need to use your "Constant: Number" piece, preferably alongside the Debug trick from Tutorial 1, but give Connectors a try as well, they'll be very important later!
psi.piecegroup.tutorial3=Tutorial 3
psi.piecegroup.tutorial3.desc=Ok, ok. I know what you're thinking. "This is boring, when do we start doing cool stuff?" Well... now!<br><br>It's time we introduce a Trick that actually does some sort of interaction with the world. Bring in "Trick: Add Motion". This trick, as you'd except, adds movement to an entity. It takes an Entity, a Vector and a Number Constant. As you should've figured out already, "Selector: Caster" returns an Entity (Player), which, if you'd use with your new "Trick: Add Motion", you could use it to add movement to your player character. The Vector is the direction in which you want the movement to be added, and the Number Constant is the speed you want to apply. Obviously, you can get this number using "Constant: Number".<br><br>We don't have any great tricks up our sleeve to get a vector for the trick, but we do have "Operator: Entity Look", which gets us a vector corresponding to the direction the player is looking. If we pass that into our "Trick: Add Motion", the player character will move in the direction they're looking. As for the number, go with 3 for now. You can change it of course, but 3 is a good one.You'll notice that when you modify the value of the constant, the numbers on the right change. These numbers are relevant now. They are the stats of your spell. The stats of your spell match up to those of your CAD, and if any of your spell's stats are below the stats of your CAD, you won't be able to cast the spell.<br><br>From the top to bottom, the stats are as follows:<br>&nComplexity&r: The amount of actions your spell has. Constants, connectors and Debug Tricks aren't counted.<br>&nPotency&r: The power of your spell. As you increase the power of your tricks, this goes up.<br>&nCost&r: The amount of Psi (the energy bar on the right of your screen) your spell is going to consume. This doesn't match up to any CAD stat, but is affected by the CAD's Efficiency. The actual value that is consumed is the one inside parenthesis. The higher the Efficiency of your CAD, the less extra you'll have to pay.<br>&nProjection&r: The amount of Tricks in your spell. Debug Tricks aren't counted.<br>&nBandwidth&r: The width or height of your spell, whichever is the highest. If you find you're going over this, try making your spell more compact.
psi.piecegroup.tutorial4=Tutorial 4
psi.piecegroup.tutorial4.desc=Do you like explosions? Of course you do. Let's make a spell that explodes the block the player is looking at.<br><br>For this, we are going to need "Trick: Explode". This takes a Vector and a Number Constant. Similarly to our "Trick: Add Motion", this constant is the power of the trick. The vector is where you want the explosion to happen. We already used "Operator: Entity Look", but that gives us a vector that's very short. If we used that, the explosion would happen in our face! Instead, we want to use an "Operator: Vector Raytrace".<br><br>This operator takes a position and a ray, both Vectors. From the position, which will be the player's position, acquirable through "Operator: Entity Position", the operator extends the "Ray" parameter vector until it collides with a block in the world. Therefore, if we use it alongside "Operator: Entity Look", we can find out where the player is looking at and create our explosion there.One thing we have to keep in mind is the fact that spells are to a range of 32 blocks from their focal point, in our case, the player casting the spell. Our explosion can't be farther than 32 blocks away from the player.<br><br>Lastly, the "Error Suppressor" piece does exactly as it describes. If something goes wrong while casting your spell, you'll get an error in your chat telling you what went wrong. Sometimes that can get annoying, when you know a spell has a possible failiure state. In that case. throw in an "Error Suppressor" anywhere in your spell's grid and all the errors will be gone.<br><br>This will be your last basic tutorial, from here you'll be able to pick between various things to pick as you level up. Have fun!
psi.piecegroup.numbersIntro=Numbers 101
psi.piecegroup.numbersIntro.desc=Numbers are an essential component to Spell Programming. These are basic arithmetic operators that can be used for math in spells.<br><br>If you don't have anything that uses numbers yet, try adding up two constants for a Debug trick.
psi.piecegroup.vectorsIntro=Vectors 101
psi.piecegroup.vectorsIntro.desc=Vectors are an essential component to Spell Programming. Many vectorial operations here included are very elementary, such as sum or subtraction. Though, one that can be less known is the Cross Product, the red piece of this set.<br><br>A Cross Product of two vectors is a vector that is perpendicular to both. You can make use of this to get a vector that goes to the player's side, by executing the Cross Product of the player's look vector and (0, 1, 0), which you can get with an "Operator: Vector Construct". 
psi.piecegroup.entitiesIntro=Entities 101
psi.piecegroup.entitiesIntro.desc=Entities are an essential component to Spell Programming. While using components like "Selector: Caster" it's possible to get the person casting the spell, the pieces included here allow for targeting other entities in the world.<br><br>You can make use of the pieces here to create spells that affect other entities. Try using it with "Trick: Add Motion" on them instead of yourself.
psi.piecegroup.projectiles=Alternative Casting
psi.piecegroup.projectiles.desc=Projectile Spell Bullets are an alternate version of Spell Bullets. These bullets, instead of casting the spell straight away, emit a projectile, that casts the spell upon colliding with something. Circle Spell Bullets create a Spell Circle where the caster is looking, the spell is cast on the position of the spell circle 20 times over the course of 5 seconds.<br><br>The usage of alternative bullets like these requires the introduction of the "Selector: Focal Point" piece, which selects the Focal Point of the spell. For normal Spell Bullets, the Focal Point is the player itself, whereas for Projectile Spell Bullets, the Focal Point is the projectile entity. Naturally, for Circle Spell Bullets, the Focal Point will be the spell circle. "Selector: Caster" remains unchanged.<br><br>The 32 block limit on spells exists around the Focal Point, so Projectile and Circle bullets allow for spell effects to happen farther away. Furthermore, a spell can always affect its Caster, even if the Caster is outside the 32 block radius of the Focal Point.
psi.piecegroup.blockWorks=Blockworks
psi.piecegroup.blockWorks.desc=Working with blocks is an essential skill. As blocks are aligned to a grid in the world, you can refer to a block's position via a Vector, so knowlege of the Vector concepts is rather important for understanding the contents of Blockworks.<br><br>Two of the most basic pieces in this group are the "Place Block" and "Break Block" Tricks. They take a Vector and either place, and break a block in the position respective to it. For the case of "Trick: Place Block", the block placed is the one to the right of the player's CAD, on the hotbar. Of course, one of those blocks is taken from the player's inventory. Knowing where to place or break a block is easy, as it can be done through "Operator: Vector Raycast".<br><br>There is something we have to keep in mind, however. A standard implementation of "Operator: Vector Raycast" gives us the block the player is looking at, we can't place a block there, as one already exists! To remedy that, we can combine our "Operator: Vector Raycast" with the new "Operator: Vector Axis Raycast" piece, which gives us a vector equivalent to the side of the block we're looking at, so if we're looking at the top of the block, it'll give us a axial vector (0, 1, 0). We can then sum that, using "Operator: Vector Sum" to the result of our raycast to get where to place our block!<br><br>In a similar fashion, "Operator: Entity Axial Look" gets an axial vector equivalent to the axis the player is looking at. Think of the "Facing" value in your F3 menu. "Operator: Entity Axial Look" does something similar. Say "Facing" would say "east", then "Operator: Entity Axial Look" would get you a vector (1, 0, 0). This, unlike the "Facing" value also detects when you're looking up and down.<br><br>The other two tricks available here are "Trick: Place Block Sequence" and "Trick: Break Block Sequence", the latter being the red piece for this group. These tricks break or place a line of blocks. Similarly to the standard break and place tricks, they require a position to start off, but they also require another Vector, "Target", that defines the line in which it should interact. So if "Target" is (0, 4, 0), it'll place or break 4 blocks up, starting from the value of "Position". The last component to these tricks is "Max", this is a number constant for the maximum amount of blocks the trick is allowed to break or place. Since the vector requirements aren't constant, this works as means of calculating the Potency and Cost of the trick. The higher you set it, the more the spell will cost.<br><br>The last piece in this group is "Operator: Vector Project". Vector Projection is a somewhat complex topic, so this will only explain one of the potential uses for it, that being projecting a vector onto an axis. Imagine you want to make a spell that places blocks from your position in the world to the position you're looking at, but in a straight line aligned to the side of the block you're lookig at (using "Operator: Vector Axis Raycast"). You start off by getting the vector that you want to place blocks on, for using "Trick: Place Block Sequence", but if you're diagonal to the block, you may get something like (3, 2, 4). That's not a straight line! We can use "Operator: Vector Project" to project that into the axis of the side you're looking at, say, (0, 0, 1). So our "Vector A" is (3, 2, 4) and our "Vector B" is (0, 0, 1). Applying the projection leaves us with (0, 0 4). If our "Vector B", was, for example, (1, 0, 0), we'd get (3, 0, 0). For the case where an axial vector is used in B, Vector Projection strips any parts of A that are 0 in B. We can then do our straight line.<br><br>As the red piece in this group is "Trick: Break Block Sequence", you won't need anything too crazy for the most part. Try making a spell that brings down an 8 block high column, so you can "treecapitate".
psi.piecegroup.infusion=Psimetal Infusion
psi.piecegroup.infusion.desc=Psimetal is an important component to creating Casting Assistance Devices with better Psi conduction. The "Trick: Infusion" piece executes a release of psionic energy similar to that of a cast with no bullets, except more concentrated and focused.<br><br>The piece takes no parameters, and functions the exact same manner as infusing Redstone to create Psidust does. To infuse Psimetal, drop Gold Ingots around, and cast a spell with "Trick: Infuse".
psi.piecegroup.movement=Movement Advances
psi.piecegroup.movement.desc=Movement and transport is a topic already addressed via the usage of "Trick: Add Motion". This group includes pieces that improve on that concept.<br><br>"Trick: Blink" is the red piece of this group, and all it does is simply teleport the target entity wherever they're looking at forwards by the constant value passed in. A negative value will teleport the entity backwards. "Trick: Mass Blink" does the same as "Trick: Blink", but focused on an Entity List, having all of them be affected by the trick.<br><br>"Trick: Mass Add Motion" is self-explanatory, it's an Entity List version of "Trick: Add Motion", adding the same motion to every entity in the list.<br><br>Lastly, "Trick: Mass Exodus" moves every entity in an Entity List to a given position, with the given speed. Negative speed will move them away.
psi.piecegroup.loopcasting=Loopcasting
psi.piecegroup.loopcasting.desc=Loopcasting is a style of magic defined by the usage of Loopcast Spell Bullets. When a spell is cast from a Loopcast Spell Bullet, it executes as if it was cast from a normal one, but also puts the player into a "loopcasting" state, where, until they unequip their CAD, will continuously cast the same spell at a rate of 4 times a second. The advantage of loopcasting is the fact that the initial cooldown to psi regeneration is only applied on the first spell in full. For each subsequent cast, the cooldown will be much shorter than usual, so, given a caster with a high enough level to sustain psi regeneration to cover the cost of a spell, said spell can be endlessly loopcasted.<br><br>The red piece of this group is "Selector: Loopcast Index". This piece selects the amount of times a spell has been loopcasted. For the initial cast this will be 0, and will be incremented once for every subsequent loopcast. This can be used alongside "Operator: Modulus" and "Operator: Integer Division" to alter how the spell functions every time it's cast.<br><br>"Operator: Integer Division" does exactly as it says on the tin, and executes division of the integer parts of the two numbers. "Operator: Modulus" calculates the remainer of the division of the integer parts of the two numbers. Using these pieces, it's possible to do things such as digging undergound bunkers in any given size.