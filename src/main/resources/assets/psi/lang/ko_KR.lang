# MISC
itemGroup.Psi=Psi

psimisc.componentType=&a구성 요소 종류&7: %s
psimisc.shiftForInfo=&7추가 정보를 보려면 &bSHIFT&7를 누르세요.
psimisc.none=(없음)
psimisc.stats=능력치들
psimisc.socketing=Socketing
psimisc.keybind=Psi 마스터 키 설정
psimisc.spellSelected=&d선택된 주문&7: %s
psimisc.name=이름:
psimisc.compiled=컴파일 성공
psimisc.errored=컴파일 에러
psimisc.weakCad=당신의 CAD는 이 주문을 사용하기에 너무 능력치가 낮습니다.
psimisc.constant=상수
psimisc.nextPage=다음 패이지
psimisc.prevPage=이전 페이지
psimisc.config=구성
psimisc.notYourProgrammer=현재 다른 사람이 이 프로그래머를 사용 중입니다.
psimisc.cantUseProgrammer=당신은 이 장치를 어떻게 사용해야 할 지 잘 모르는 것 같습니다.
psimisc.levelDisplay=레벨 %d
psimisc.levelInfo=레벨 %d - 레벨 포인트: %d
psimisc.levelInfoCreative=레벨 %d (크리에이티브) - 레벨 포인트: %d
psimisc.locked=잠김
psimisc.requirements=요구 사항
psimisc.learn=배우기
psimisc.levelup=레벨 업
psimisc.wip=Psi 베타 | 최종 버전 아님!
psimisc.bulletType=&b종류&7: %s
psimisc.bulletCost=&b소모값 계수&7: %s%%
psimisc.levelUpInfo1=1 레벨 포인트를 얻었습니다.
psimisc.levelUpInfo2=CAD를 내려놓고 [%s]를 눌러 사용하세요!
psimisc.importFromClipboard=클립보드에서 불러오기
psimisc.exportToClipboard=클립보드로 내보내기
psimisc.mustHoldShift=(SHIFT를 눌러야 함)
psimisc.malformedJson=불러오기 에러: 기형의 문자열입니다.
psimisc.missingPieces=불러오기 에러: 불러오는 데 필요한 요소가 존재하지 않습니다.
psimisc.loadPrompt=Load?
psimisc.spectator=[관전자 모드]
psimisc.multipleCads=당신의 인벤토리의 다른 CAD가 주문 사용을 방해하고 있습니다. 당신은 오직 하나의 CAD만 사용할 수 있습니다.
psimisc.providerMod=&7애드온: &9%s
psimisc.trickPattern=^동작: (.+)$
psimisc.programmerHelp=&a프로그래머 도움말
psimisc.ctrlWindows=Ctrl
psimisc.ctrlMac=Cmd
psimisc.enterCommit=기여하려면 Enter를 누르세요.
psimisc.semicolonLine=줄바꿈을 위해 ;를 사용하세요.
psimisc.programmerCoords=선택됨: [%d, %d] | 커서: [%d, %d]
psimisc.programmerCoordsNoCursor=선택됨: [%d, %d]
psimisc.softcapIndicator=당신은 레벨 25에 도달했습니다. 아직 더 레벨 업할 수 있고, 획득할 요소가 남아 있지만, 이것이 당신이 추가적인 Psi 에너지를 얻을 수 있는 마지막 레벨입니다. 그러므로 당신의 Psi 에너지는 최대 5000에서 머무를 것입니다.

# SUBTITLES
psi.subtitle.bulletCreate=주문 저장됨
psi.subtitle.cadCreate=CAD 조립됨
psi.subtitle.spellCast=주문 시전됨
psi.subtitle.loopcast=반복 주문 시전됨


# VERSIONING
psi.versioning.flavour0=Seems like Psi is outdated. What a shame.
psi.versioning.flavour1=Are you Psiched to update Psi?
psi.versioning.flavour2=Psi is outdated. You expected a funny message but it's just outdated, sorry :(
psi.versioning.flavour3=You can download the new Psi update from the servers at Magic High School.
psi.versioning.flavour4=Psi is outdated. On the flip pside, you can update it.
psi.versioning.flavour5=Only Weeds leave Psi outdated.
psi.versioning.flavour6=Don't be a Psicho, update Psi.
psi.versioning.flavour7=Psi is up to date. Psiche! I fooled you.
psi.versioning.flavour8=You should update Psi, get it from the webpsite.
psi.versioning.flavour9=Don't confuse yourself like a Psiduck, update Psi.
psi.versioning.outdated=당신은 현재 Psi 빌드 %s를 구동하고 있고, 최신 빌드는 %s입니다..
psi.versioning.updateMessage=["[",{"text":"다운로드","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":" 업그레이드하려면 클릭하세요","color":"aqua"}},"clickEvent":{"action":"run_command","value":"/psi-download-latest %version%"}},"] [",{"text":"웹사이트","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":"클릭하면 모드 웹사이트로 이동합니다.","color":"aqua"}},"clickEvent":{"action":"open_url","value":"http://psi.vazkii.us/downloads.php"}},"] [",{"text":"변경 사항","color":"aqua","hoverEvent":{"action":"show_text","value":{"text":"클릭하면 이 버전의 변경 사항을 볼 수 있습니다.","color":"aqua"}},"clickEvent":{"action":"open_url","value":"http://psi.vazkii.us/changelog.php#%version%"}},"]"]
psi.versioning.startingDownload=[{"text":"%s의 다운로드를 시작했습니다. 하드 디스크를 제거하지 마세요. 즐기고 계신가요","color":"yellow"},{"text":"Psi","color":"aqua"},{"text":"? 지원을 생각해 보세요: ","color":"yellow"},{"text":"Vazkii","color":"light_purple"},{"text":"를 ","color":"yellow"},{"text":"[Patreon에서]","color":"gold","hoverEvent":{"action":"show_text","value":{"text":"클릭하면 Vazkii의 Patreon으로 이동됩니다.","color":"light_purple"}},"clickEvent":{"action":"open_url","value":"http://www.patreon.com/Vazkii"}},{"text":"!","color":"yellow"}]
psi.versioning.doneDownloading=%s 다운로드를 마쳤습니다. 업데이트하려면 당신의 구 버전 Psi .jar 파일을 삭제하고 게임을 다시 시작하세요.
psi.versioning.downloadedAlready=당신은 이미 최신 버전을 다운로드했습니다. 게임을 닫고, 당신의 구 버전 Psi .jar 파일을 삭제하고 게임을 다시 시작하세요.
psi.versioning.downloadingAlready=업데이트가 이미 다운로드 중입니다. 조금만 시간을 주실 수 있나요?
psi.versioning.error=헐! 업데이트를 다운로드하는 과정에서 문제가 발생했습니다. 혹시 psi.vazkii.us가 접근 불가 상태인가요?
psi.versioning.disabled=죄송합니다. 이 기능은 현재 서버 호스트 문제로 인해 비활성화되어 있습니다.

# BLOCK NAMES
tile.psi:cadAssembler.name=CAD 조립기
tile.psi:programmer.name=주문 프로그래머
tile.psi:psidust_block.name=Psi 가루 블럭
tile.psi:psimetal_block.name=Psi 철 블럭
tile.psi:psigem_block.name=Psi 젬 블럭
tile.psi:psimetal_plate_black.name=어두운 Psi 철판
tile.psi:psimetal_plate_black_light.name=어두운 Psi 철 Flow 판
tile.psi:psimetal_plate_cyan.name=밝은 Psi 철판
tile.psi:psimetal_plate_cyan_light.name=밝은 Psi 철 Flow 판
tile.psi:ebony_psimetal_block.name=Ebony Psi 철 블럭
tile.psi:ivory_psimetal_block.name=Ivory Psi 철 블럭
tile.psi:conjured.name=소환된 블럭

# ITEM NAMES
item.psi:psidust.name=Psi 가루
item.psi:psimetal.name=Psi 철괴
item.psi:psigem.name=Psi 젬
item.psi:ebonyPsimetal.name=Ebony Psi 철괴
item.psi:ivoryPsimetal.name=Ivory Psi 철괴
item.psi:ebonySubstance.name=Ebony 물질
item.psi:ivorySubstance.name=Ivory 물질
item.psi:cad.name=시전 도우미 장치(CAD)
item.psi:cadAssemblyIron.name=철 CAD 틀
item.psi:cadAssemblyGold.name=금 CAD 틀
item.psi:cadAssemblyPsimetal.name=Psi 철 CAD 틀
item.psi:cadAssemblyEbonyPsimetal.name=Ebony Psi 철 CAD 틀
item.psi:cadAssemblyIvoryPsimetal.name=Ivory Psi 철 CAD 틀
item.psi:cadAssemblyCreative.name=크리에이티브 CAD 틀
item.psi:cadCoreBasic.name=기본 CAD 코어
item.psi:cadCoreOverclocked.name=오버클럭된 CAD 코어
item.psi:cadCoreConductive.name=전도성 CAD 코어
item.psi:cadCoreHyperclocked.name=하이퍼 오버클럭된 CAD 코어
item.psi:cadCoreRadiative.name=발광하는 CAD 코어
item.psi:cadSocketBasic.name=기본 CAD 소켓
item.psi:cadSocketSignaling.name=Signaling CAD 소켓
item.psi:cadSocketLarge.name=대형 CAD 소켓
item.psi:cadSocketTransmissive.name=전달 가능한 CAD 소켓
item.psi:cadSocketHuge.name=초대형 CAD 소켓
item.psi:cadBatteryBasic.name=기본 CAD 배터리
item.psi:cadBatteryExtended.name=확장된 CAD 배터리
item.psi:cadBatteryUltradense.name=초고밀도 CAD 배터리
item.psi:cadColorizerWhite.name=흰색 CAD 염색제
item.psi:cadColorizerOrange.name=주황색 CAD 염색제
item.psi:cadColorizerMagenta.name=심홍색 CAD 염색제
item.psi:cadColorizerLightBlue.name=밝은 파랑색 CAD 염색제
item.psi:cadColorizerYellow.name=노랑색 CAD 염색제
item.psi:cadColorizerLime.name=라임색 CAD 염색제
item.psi:cadColorizerPink.name=분홍색 CAD 염색제
item.psi:cadColorizerGray.name=회색 CAD 염색제
item.psi:cadColorizerSilver.name=밝은 회색 CAD 염색제
item.psi:cadColorizerCyan.name=하늘색 CAD 염색제
item.psi:cadColorizerPurple.name=보라색 CAD 염색제
item.psi:cadColorizerBlue.name=파랑색 CAD 염색제
item.psi:cadColorizerBrown.name=갈색 CAD 염색제
item.psi:cadColorizerGreen.name=초록색 CAD 염색제
item.psi:cadColorizerRed.name=빨강색 CAD 염색제
item.psi:cadColorizerBlack.name=검은색 CAD 염색제
item.psi:cadColorizerRainbow.name=전역 CAD 염색제
item.psi:cadColorizerPsi.name=Psi CAD 염색제
item.psi:spellBullet.name=주문 탄창
item.psi:spellBulletActive.name=프로그램된 주문 탄창
item.psi:spellBulletProjectile.name=발사체형 주문 탄창
item.psi:spellBulletProjectileActive.name=프로그램된 발사체형 주문 탄창
item.psi:spellBulletLoop.name=지속 시전형 주문 탄창
item.psi:spellBulletLoopActive.name=프로그램된 지속 시전형 주문 탄창
item.psi:spellBulletCircle.name=원형 주문 탄창
item.psi:spellBulletCircleActive.name=프로그램된 원형 주문 탄창
item.psi:spellBulletGrenade.name=수류탄형 주문 탄창
item.psi:spellBulletGrenadeActive.name=프로그램된 수류탄형 주문 탄창
item.psi:spellBulletCharge.name=설치형 주문 탄창
item.psi:spellBulletChargeActive.name=프로그램된 설치형 주문 탄창
item.psi:spellBulletMine.name=지뢰형 주문 탄창
item.psi:spellBulletMineActive.name=프로그램된 지뢰형 주문 탄창
item.psi:spellDrive.name=주문 저장소
item.psi:psimetalShovel.name=Psi 철 삽
item.psi:psimetalPickaxe.name=Psi 철 곡괭이
item.psi:psimetalAxe.name=Psi 철 도끼
item.psi:psimetalSword.name=Psi 철 칼
item.psi:detonator.name=주문 발동기
item.psi:psimetalExosuitHelmet.name=Psi 철 엑소수트 헬멧
item.psi:psimetalExosuitChestplate.name=Psi 철 엑소수트 흉갑
item.psi:psimetalExosuitLeggings.name=Psi 철 엑소수트 바지
item.psi:psimetalExosuitBoots.name=Psi 철 엑소수트 신발
item.psi:exosuitController.name=엑소수트 조종기
item.psi:exosuitSensorLight.name=엑소수트 빛 센서
item.psi:exosuitSensorWater.name=엑소수트 물 센서
item.psi:exosuitSensorHeat.name=엑소수트 열 센서
item.psi:exosuitSensorStress.name=엑소수트 체력 센서
item.psi:vectorRuler.name=벡터 자

# DEATH MESSAGES
death.attack.psi-overload=%s(이)가 넘쳐 흐른 Psi 에너지에 감전되었습니다.

# COMPONENT NAMES
psi.component.assembly=틀
psi.component.core=코어
psi.component.socket=소켓
psi.component.battery=배터리
psi.component.dye=염색제

# CAD STAT NAMES
psi.cadstat.efficiency=효율
psi.cadstat.potency=위력
psi.cadstat.complexity=복잡성
psi.cadstat.projection=발동
psi.cadstat.bandwidth=대역폭
psi.cadstat.sockets=소켓
psi.cadstat.overflow=과부하

# SPELL STAT NAMES
psi.spellstat.complexity=복잡도
psi.spellstat.complexity.desc=요소의 개수
psi.spellstat.potency=위력
psi.spellstat.potency.desc=주문의 힘
psi.spellstat.cost=소모값
psi.spellstat.cost.desc=시전 시의 Psi 에너지 소모값
psi.spellstat.projection=발동
psi.spellstat.projection.desc=동작 요소의 개수
psi.spellstat.bandwidth=대역폭
psi.spellstat.bandwidth.desc=주문의 가로/세로 길이 (최대 값)

# BULLET TYPES
psi.bulletType0=일반
psi.bulletType1=발사체
psi.bulletType2=지속 시전
psi.bulletType3=원형
psi.bulletType4=수류탄형
psi.bulletType5=설치
psi.bulletType6=지뢰형

# EXOSUIT EVENTS
psi.event.none=(이벤트 없음)
psi.event.damage=&b이벤트&7: 대미지
psi.event.tick=&b이벤트&7: 매 틱
psi.event.jump=&b이벤트&7: 점프
psi.event.lowLight=&b이벤트&7: 낮은 밝기
psi.event.underwater=&b이벤트&7: 물 속
psi.event.onFire=&b이벤트&7: 불 속
psi.event.lowHp=&b이벤트&7: 낮은 체력

# PROGRAMMER REFERENCE
# %1$s is Ctrl or Cmd, depending on whether you're on windows or mac
# spaces are important
psi.programmerReference0= &b조작키
psi.programmerReference1=  요소 제거: &bDelete
psi.programmerReference2=  창 초기화: &b%1$s-Shift-Delete
psi.programmerReference3=  창 이동: &b%1$s + 방향키
psi.programmerReference4=  복사/잘라내기/붙여넣기: &b%1$s-C/%1$s-X/%1$s-V
psi.programmerReference5=  되돌리기/다시하기: &b%1$s-Z/%1$s-Y
psi.programmerReference6=  패널 열기/요소 선택: &bEnter
psi.programmerReference7=  매개 변수 설정: &b숫자 키 + 방향키
psi.programmerReference8=  주석 설정: &b%1$s-D
psi.programmerReference9=  초점 전환: &bTab
psi.programmerReference10=  툴팁 표시: &bAlt
psi.programmerReference11=  커서 이동: &b방향키
psi.programmerReference12=  Imgur로 업로드: &b%1$s-Shift-Alt-G
psi.programmerReference13=  Reddit에 공유: &b%1$s-Shift-Alt-R
psi.programmerReference14=
psi.programmerReference15= &b검색 용어
psi.programmerReference16=  받는 형식: &bin:(형식)
psi.programmerReference17=  내보내는 형식: &bout:(형식)
psi.programmerReference18=  ~로 시작하는 이름: &b(이름)_
psi.programmerReference19=  ~로 끝나는 이름: &b_(이름)

# SPELl PIECE NAMES
# -- SELECTORS
psi.spellpiece.selectorCaster=선택: 시전자
psi.spellpiece.selectorCaster.desc=주문을 시전하는 사람을 선택합니다.
psi.spellpiece.selectorFocalPoint=선택: 발동 위치
psi.spellpiece.selectorFocalPoint.desc=이 주문의 발동 위치의 엔티티를 선택합니다.
psi.spellpiece.selectorNearbyItems=선택: 주위 아이템
psi.spellpiece.selectorNearbyItems.desc=주어진 위치에서 주위에 있는 아이템들을 선택합니다.
psi.spellpiece.selectorNearbyLiving=선택: 주위 생물체들
psi.spellpiece.selectorNearbyLiving.desc=주어진 위치에서 주위에 있는 생물체들을 선택합니다.
psi.spellpiece.selectorNearbyEnemies=선택: 주위 적들
psi.spellpiece.selectorNearbyEnemies.desc=주어진 위치에서 주위에 있는 적들을 선택합니다.
psi.spellpiece.selectorNearbyAnimals=선택: 주위 동물들
psi.spellpiece.selectorNearbyAnimals.desc=주어진 위치에서 주위에 있는 동물들을 선택합니다.
psi.spellpiece.selectorNearbyProjectiles=선택: 주위 발사체들
psi.spellpiece.selectorNearbyProjectiles.desc=주어진 위치에서 주위에 있는 발사체들을 선택합니다.
psi.spellpiece.selectorNearbySmeltables=선택: 주위 구울 것들
psi.spellpiece.selectorNearbySmeltables.desc=주어진 위치에서 주위에 있는 구울 수 있는 것들을 선택합니다.
psi.spellpiece.selectorLoopcastIndex=선택: 반복 시전 횟수
psi.spellpiece.selectorLoopcastIndex.desc=반복 시전 주문이 시전된 회수를 반환합니다.
psi.spellpiece.selectorBlockBroken=선택: 부서진 블럭
psi.spellpiece.selectorBlockBroken.desc=도구에 의해 부서진 블럭을 선택합니다.
psi.spellpiece.selectorBlockSideBroken=선택: 부서진 블럭 면
psi.spellpiece.selectorBlockSideBroken.desc=도구에 의해 부서진 블럭의 면을 선택합니다.
psi.spellpiece.selectorAttackTarget=선택: 공격당한 엔티티
psi.spellpiece.selectorAttackTarget.desc=공격당한 엔티티를 선택합니다.
psi.spellpiece.selectorSneakStatus=선택: 웅크림 여부
psi.spellpiece.selectorSneakStatus.desc=시전자가 웅크리고 있는지를 반환합니다. (웅크렸으면 1, 아니면 0)
psi.spellpiece.selectorTime=선택: 시간
psi.spellpiece.selectorTime.desc=CAD의 내부 시간을 반환합니다. (틱 단위)
psi.spellpiece.selectorAttacker=선택: 공격자
psi.spellpiece.selectorAttacker.desc=시전자를 공격한 엔티티를 선택합니다.
psi.spellpiece.selectorDamageTaken=선택: 입은 데미지
psi.spellpiece.selectorDamageTaken.desc=시전자가 입은 데미지를 반환합니다.
psi.spellpiece.selectorRulerVector=선택: 벡터 자
psi.spellpiece.selectorRulerVector.desc=벡터 자에 의해 정의된 벡터를 선택합니다.
psi.spellpiece.selectorItemPresence=선택: 아이템 양
psi.spellpiece.selectorItemPresence.desc=특정 슬롯의 아이템의 양을 반환합니다.
psi.spellpiece.selectorBlockPresence=선택: 블럭 존재
psi.spellpiece.selectorBlockPresence.desc=해당 위치의 블럭의 존재와 고체성을 반환합니다. (블럭이 없으면 0, 액체면 1, 고체면 2)
psi.spellpiece.selectorSavedVector=선택: 저장된 벡터
psi.spellpiece.selectorSavedVector.desc=CAD 메모리에 저장된 벡터를 선택합니다.
psi.spellpiece.selectorEidosChangelog=선택: 과거 기록
psi.spellpiece.selectorEidosChangelog.desc=지정된 틱 전의 과거의 위치를 선택합니다.

# -- OPERATORS
psi.spellpiece.operatorSum=연산자: 덧셈
psi.spellpiece.operatorSum.desc=A + B (+ C)
psi.spellpiece.operatorSubtract=연산자: 뺄셈
psi.spellpiece.operatorSubtract.desc=A - B (- C)
psi.spellpiece.operatorMultiply=연산자: 곱셈
psi.spellpiece.operatorMultiply.desc=A * B (* C)
psi.spellpiece.operatorDivide=연산자: 나눗셈
psi.spellpiece.operatorDivide.desc=A / B
psi.spellpiece.operatorAbsolute=연산자: 절대값
psi.spellpiece.operatorAbsolute.desc=숫자의 절대값을 반환합니다.
psi.spellpiece.operatorInverse=연산자: 역수
psi.spellpiece.operatorInverse.desc=숫자의 역수를 반환합니다.
psi.spellpiece.operatorModulus=연산자: 나머지
psi.spellpiece.operatorModulus.desc=A % B (정수)
psi.spellpiece.operatorIntegerDivide=연산자: 정수의 나눗셈
psi.spellpiece.operatorIntegerDivide.desc=A / B (정수)
psi.spellpiece.operatorRandom=연산자: 무작위 값
psi.spellpiece.operatorRandom.desc=0과 주어진 값 사이의 무작위 값을 반환합니다.
psi.spellpiece.operatorSin=연산자: 사인
psi.spellpiece.operatorSin.desc=sin(A)
psi.spellpiece.operatorCos=연산자: 코사인
psi.spellpiece.operatorCos.desc=cos(A)
psi.spellpiece.operatorAsin=연산자: 아크 사인
psi.spellpiece.operatorAsin.desc=asin(A)
psi.spellpiece.operatorAcos=연신지: 아크 코사인
psi.spellpiece.operatorAcos.desc=acos(A)
psi.spellpiece.operatorMax=연산자: 최대값
psi.spellpiece.operatorMax.desc=주어진 값 중 최대값을 반환합니다.
psi.spellpiece.operatorMin=연산자: 최소값
psi.spellpiece.operatorMin.desc=주어진 값 중 최소값을 반환합니다.
psi.spellpiece.operatorSquare=연산자: 제곱
psi.spellpiece.operatorSquare.desc=A^2
psi.spellpiece.operatorCube=연산자: 세제곱
psi.spellpiece.operatorCube.desc=A^3
psi.spellpiece.operatorPower=연산자: 거듭제곱
psi.spellpiece.operatorPower.desc=A^B
psi.spellpiece.operatorSquareRoot=연산자: 제곱근
psi.spellpiece.operatorSquareRoot.desc=sqrt(A)
psi.spellpiece.operatorLog=연산자: 로그
psi.spellpiece.operatorLog.desc=log(A) 또는 logB(A)
psi.spellpiece.operatorCeiling=연산자: 올림
psi.spellpiece.operatorCeiling.desc=소수점을 올려 정수로 만듭니다.
psi.spellpiece.operatorFloor=연산자: 내림
psi.spellpiece.operatorFloor.desc=소수점을 내려 정수로 만듭니다.
psi.spellpiece.operatorRound=연산자: 반올림
psi.spellpiece.operatorRound.desc=숫자를 반올림해 정수로 만듭니다.
psi.spellpiece.operatorEntityPosition=연산자: 엔티티의 위치
psi.spellpiece.operatorEntityPosition.desc=엔티티의 위치를 구합니다.
psi.spellpiece.operatorEntityLook=연산자: 엔티티의 시선
psi.spellpiece.operatorEntityLook.desc=엔티티의 시선 벡터를 구합니다.
psi.spellpiece.operatorEntityMotion=연산자: 엔티티의 움직임
psi.spellpiece.operatorEntityMotion.desc=엔티티의 움직임 벡터를 구합니다.
psi.spellpiece.operatorEntityAxialLook=연산자: 엔티티의 축 시선
psi.spellpiece.operatorEntityAxialLook.desc=축으로 정렬된 엔티티의 시선 벡터를 구합니다.
psi.spellpiece.operatorFocusedEntity=연산자: 바라보는 엔티티
psi.spellpiece.operatorFocusedEntity.desc=대상 엔티티가 바라보고 있는 엔티티를 반환합니다.
psi.spellpiece.operatorVectorRaycast=연산자: 벡터 광선 추적
psi.spellpiece.operatorVectorRaycast.desc=벡터의 광선을 추적하여 좌표를 반환합니다. (최대 거리: 32)
psi.spellpiece.operatorVectorRaycastAxis=연산자: 벡터 축 광선 추적
psi.spellpiece.operatorVectorRaycastAxis.desc=축을 기준으로 한 벡터 광선 추적 정보를 반환합니다. (최대 거리: 32)
psi.spellpiece.operatorVectorSum=연산자: 벡터 덧셈
psi.spellpiece.operatorVectorSum.desc=A + B (+ C)
psi.spellpiece.operatorVectorSubtract=연산자: 벡터 뺄셈
psi.spellpiece.operatorVectorSubtract.desc=A - B (- C)
psi.spellpiece.operatorVectorMultiply=연산자: 벡터 곱셈
psi.spellpiece.operatorVectorMultiply.desc=A * B
psi.spellpiece.operatorVectorDivide=연산자: 벡터 나눗셈
psi.spellpiece.operatorVectorDivide.desc=A / B
psi.spellpiece.operatorVectorCrossProduct=연산자: 벡터 상호 곱
psi.spellpiece.operatorVectorCrossProduct.desc=A x B
psi.spellpiece.operatorVectorNormalize=연산자: 벡터 일반화
psi.spellpiece.operatorVectorNormalize.desc=벡터를 일반화시켜 규모가 1이 되게 합니다.
psi.spellpiece.operatorVectorNegate=연산자: 벡터 부호 변환
psi.spellpiece.operatorVectorNegate.desc=벡터의 부호를 변환합니다.
psi.spellpiece.operatorVectorMagnitude=연산자: 벡터 규모
psi.spellpiece.operatorVectorMagnitude.desc=벡터의 규모를 반환합니다.
psi.spellpiece.operatorVectorConstruct=연산자: 벡터 생성
psi.spellpiece.operatorVectorConstruct.desc=매개 변수를 바탕으로 벡터를 생성합니다.
psi.spellpiece.operatorVectorExtractX=연산자: 벡터 X 추출
psi.spellpiece.operatorVectorExtractX.desc=벡터에서 X 좌표를 추출합니다.
psi.spellpiece.operatorVectorExtractY=연산자: 벡터 Y 추출
psi.spellpiece.operatorVectorExtractY.desc=벡터에서 Y 좌표를 추출합니다.
psi.spellpiece.operatorVectorExtractZ=연산자: 벡터 Z 추출
psi.spellpiece.operatorVectorExtractZ.desc=벡터에서 Z 좌표를 추출합니다.
psi.spellpiece.operatorVectorProject=연산자: 벡터 투영
psi.spellpiece.operatorVectorProject.desc=벡터 A를 벡터 B에 투영시킵니다.
psi.spellpiece.operatorVectorDotProduct=연산자: 벡터 도트 곱
psi.spellpiece.operatorVectorDotProduct.desc=A . B
psi.spellpiece.operatorClosestToPoint=연산자: 지점에서 가장 가까운
psi.spellpiece.operatorClosestToPoint.desc=지점에서 가장 가까운 엔티티를 반환합니다.  
psi.spellpiece.operatorRandomEntity=연산제: 무작위 엔티티
psi.spellpiece.operatorRandomEntity.desc=무작위 엔티티를 반환합니다.
psi.spellpiece.operatorListAdd=연산자: 목록에 추가
psi.spellpiece.operatorListAdd.desc=엔티티를 목록에 추가합니다.
psi.spellpiece.operatorListRemove=연산자: 목록에서 제거
psi.spellpiece.operatorListRemove.desc=엔티티를 목록에서 제거합니다.

# -- CONSTANTS
psi.spellpiece.constantNumber=상수: 숫자
psi.spellpiece.constantNumber.desc=값을 설정하려면 선택 후 값을 입력하세요
psi.spellpiece.constantPi=상수: 원주율
psi.spellpiece.constantPi.desc=원주율의 값을 반환합니다.
psi.spellpiece.constantE=연산자: e
psi.spellpiece.constantE.desc=e의 값을 반환합니다.
psi.spellpiece.constantWrapper=상수: 변환기
psi.spellpiece.constantWrapper.desc=일반 형식의 숫자를 상수 형식으로 변환합니다.

# -- OTHERS
psi.spellpiece.connector=커넥터
psi.spellpiece.connector.desc=요소들을 잇습니다.
psi.spellpiece.errorSuppressor=에러 진압기
psi.spellpiece.errorSuppressor.desc=주문에 의해 발생한 에러를 진압합니다.

# -- TRICKS
psi.spellpiece.trickDebug=동작: 디버그
psi.spellpiece.trickDebug.desc=테스트 목적. 대상을 출력합니다.
psi.spellpiece.trickDelay=동작: 잠자기
psi.spellpiece.trickDelay.desc=주어진 틱만큼 실행을 미룹니다.
psi.spellpiece.trickDie=동작: 죽기
psi.spellpiece.trickDie.desc=주어진 숫자가 -1과 1 사이이면 실행을 중단합니다.
psi.spellpiece.trickEvaluate=동작: 값 구하기
psi.spellpiece.trickEvaluate.desc=값을 구합니다. 실질적인 작동은 없습니다.
psi.spellpiece.trickAddMotion=동작: 움직임 추가
psi.spellpiece.trickAddMotion.desc=대상 엔티티에 움직임을 추가합니다.
psi.spellpiece.trickExplode=동작: 폭발
psi.spellpiece.trickExplode.desc=폭발을 일으킵니다.
psi.spellpiece.trickBreakBlock=동작: 블럭 부수기
psi.spellpiece.trickBreakBlock.desc=블럭을 부숩니다.
psi.spellpiece.trickBreakInSequence=동작: 블럭 묶음 부수기
psi.spellpiece.trickBreakInSequence.desc=벡터에 의해 정의된 블럭 묶음을 부숩니다.
psi.spellpiece.trickPlaceBlock=동작: 블럭 설치하기
psi.spellpiece.trickPlaceBlock.desc=블럭을 설치합니다.(CAD의 오른쪽 슬롯의 블럭)
psi.spellpiece.trickPlaceInSequence=동작: 블럭 묽음 설치하기
psi.spellpiece.trickPlaceInSequence.desc=벡터에 의해 정의된 블럭 묶음을 설치합니다.
psi.spellpiece.trickInfusion=동작: 에너지 주입
psi.spellpiece.trickInfusion.desc=금에 에너지를 주입해 Psi 철로 만듭니다.
psi.spellpiece.trickBlink=동작: 점멸
psi.spellpiece.trickBlink.desc=앞으로 점멸합니다.
psi.spellpiece.trickMassBlink=동작: 전체 점멸
psi.spellpiece.trickMassBlink.desc=모두 앞으로 점멸합니다.
psi.spellpiece.trickMassAddMotion=동작: 전체 동작 추가
psi.spellpiece.trickMassAddMotion.desc=엔티티 목록의 모든 엔티티에 움직임을 추가합니다.
psi.spellpiece.trickMassExodus=동작: 전체 집결
psi.spellpiece.trickMassExodus.desc=엔티티 목록의 모든 엔티티를 지정된 위치로 옮깁니다.
psi.spellpiece.trickMoveBlock=동작: 블럭 옮기기
psi.spellpiece.trickMoveBlock.desc=축 벡터에 의해 정의된 블럭을 옮깁니다.
psi.spellpiece.trickCollapseBlock=동작: 블럭 무너뜨리기
psi.spellpiece.trickCollapseBlock.desc=해당 블럭이 모래인 것처럼, 블럭을 무너뜨립니다.
psi.spellpiece.trickSmite=동작: 번개
psi.spellpiece.trickSmite.desc=지정된 위치에 번개를 발생시킵니다.
psi.spellpiece.trickBlaze=동작: 화염
psi.spellpiece.trickBlaze.desc=지정된 위치에 불을 발생시킵니다.
psi.spellpiece.trickTorrent=동작: 수맥
psi.spellpiece.trickTorrent.desc=지정된 위치에 물을 발생시킵니다.
psi.spellpiece.trickOvergrow=동작: 급성장
psi.spellpiece.trickOvergrow.desc=지정된 위치에 비료를 줍니다.
psi.spellpiece.trickGreaterInfusion=동작: 에너지 대량 주입
psi.spellpiece.trickGreaterInfusion.desc=다이아몬드에 에너지를 주입해 Psi 젬으로 만듭니다.
psi.spellpiece.trickEbonyIvory=Trick: Ebony And Ivory
psi.spellpiece.trickEbonyIvory.desc=Infuses Coal and Quartz. Must be used in the End
psi.spellpiece.trickSpeed=동작: 신속
psi.spellpiece.trickSpeed.desc=신속 효과를 적용합니다.
psi.spellpiece.trickHaste=동작: 성급함
psi.spellpiece.trickHaste.desc=성급함 효과를 적용합니다.
psi.spellpiece.trickStrength=동작: 힘
psi.spellpiece.trickStrength.desc=힘 효과를 적용합니다.
psi.spellpiece.trickJumpBoost=동작: 점프 강화
psi.spellpiece.trickJumpBoost.desc=점프 강화 효과를 적용합니다.
psi.spellpiece.trickWaterBreathing=동작: 수중 호흡
psi.spellpiece.trickWaterBreathing.desc=수중 호흡 효과를 적용합니다.
psi.spellpiece.trickFireResistance=동작: 화염 저항
psi.spellpiece.trickFireResistance.desc=화염 저항 효과를 적용합니다.
psi.spellpiece.trickInvisibility=동작: 투명화
psi.spellpiece.trickInvisibility.desc=투명화 효과를 적용합니다.
psi.spellpiece.trickRegeneration=동작: 재생
psi.spellpiece.trickRegeneration.desc=재생 효과를 적용합니다.
psi.spellpiece.trickResistance=동작: 저항
psi.spellpiece.trickResistance.desc=저항 효과를 적용합니다.
psi.spellpiece.trickSlowness=동작: 구속
psi.spellpiece.trickSlowness.desc=구속 효과를 적용합니다.
psi.spellpiece.trickWeakness=동작: 나약함
psi.spellpiece.trickWeakness.desc=나약함 효과를 적용합니다.
psi.spellpiece.trickWither=동작: 위더
psi.spellpiece.trickWither.desc=위더 효과를 적용합니다.
psi.spellpiece.trickIgnite=동작: 불태우기
psi.spellpiece.trickIgnite.desc=대상 엔티티를 불태웁니다.
psi.spellpiece.trickEidosAnchor=동작: 과거의 닻
psi.spellpiece.trickEidosAnchor.desc=일정 시간 이후 시전자를 현재 위치로 이동시킵니다.
psi.spellpiece.trickEidosReversal=동작: 과거 회귀
psi.spellpiece.trickEidosReversal.desc=시전자를 일정 시간 전 위치로 이동시킵니다.
psi.spellpiece.trickSmeltItem=동작: 아이템 굽기
psi.spellpiece.trickSmeltItem.desc=아이템의 엔티티를 굽습니다.
psi.spellpiece.trickSmeltBlock=동작: 블럭 굽기
psi.spellpiece.trickSmeltBlock.desc=블럭을 굽습니다.
psi.spellpiece.trickConjureBlock=동작: 블럭 소환
psi.spellpiece.trickConjureBlock.desc=주어진 위치에 블럭을 소환합니다.
psi.spellpiece.trickConjureLight=동작: 광원 소환
psi.spellpiece.trickConjureLight.desc=주어진 위치에 광원을 소환합니다.
psi.spellpiece.trickConjureBlockSequence=동작: 블럭 묶음 소환
psi.spellpiece.trickConjureBlockSequence.desc=블럭 묶음을 소환합니다.
psi.spellpiece.trickSwitchTargetSlot=동작: 선택 슬롯 변경
psi.spellpiece.trickSwitchTargetSlot.desc=이 주문에서 선택된 슬롯을 변경합니다.
psi.spellpiece.trickSaveVector=동작: 벡터 저장
psi.spellpiece.trickSaveVector.desc=CAD 메모리에 벡터를 저장합니다.

# SPELL PARAMETER NAMES
psi.spellparam.target=대상
psi.spellparam.number=숫자
psi.spellparam.number1=숫자 A
psi.spellparam.number2=숫자 B
psi.spellparam.number3=숫자 C
psi.spellparam.number4=숫자 D
psi.spellparam.vector1=벡터 A
psi.spellparam.vector2=벡터 B
psi.spellparam.vector3=벡터 C
psi.spellparam.vector4=벡터 D
psi.spellparam.position=위치
psi.spellparam.ray=광선
psi.spellparam.max=최대
psi.spellparam.min=최소
psi.spellparam.power=힘
psi.spellparam.direction=방향
psi.spellparam.speed=속도
psi.spellparam.x=X
psi.spellparam.y=Y
psi.spellparam.z=Z
psi.spellparam.radius=범위
psi.spellparam.distance=거리
psi.spellparam.time=시간
psi.spellparam.list=목록
psi.spellparam.constant=상수
psi.spellparam.shift=이동
psi.spellparam.slot=슬롯
psi.spellparam.base=기반

# DATA TYPE NAMES
psi.datatype.Null=없음
psi.datatype.Any=모든 타입
psi.datatype.Double=숫자
psi.datatype.Integer=숫자
psi.datatype.Number=숫자
psi.datatype.Vector3=벡터
psi.datatype.Entity=엔티티
psi.datatype.EntityLiving=엔티티 (생명체)
psi.datatype.EntityLivingBase=엔티티 (생명체)
psi.datatype.EntityPlayer=엔티티 (플레이어, 생명체)
psi.datatype.EntityListWrapper=엔티티 목록

# COMPILER ERRORS
psi.spellerror.nospell=컴파일할 주문이 없습니다.
psi.spellerror.noname=주문의 이름이 없습니다.
psi.spellerror.notricks=주문이 동작을 포함하지 않습니다.
psi.spellerror.unsetparam=필요한 매개 변수가 채워지지 않았습니다.
psi.spellerror.nullparam=매개 변수가 빈칸을 가리킵니다.
psi.spellerror.invalidparam=매개 변수가 유효하지 않은 칸을 가리킵니다.
psi.spellerror.samesideparams=두 개 또는 더 많은 매개 변수가 같은 면을 가리킵니다.
psi.spellerror.loop=무한 반복을 해결할 수 없습니다.
psi.spellerror.nonpositivevalue=양수여야 하는 매개 변수가 양수가 아닙니다.
psi.spellerror.noninteger=정수여야 하는 매개 변수가 정수가 아닙니다.
psi.spellerror.nonpositiveinteger=양수형 정수여야 하는 매개 변수가 양수형 정수가 아닙니다.
psi.spellerror.statoverflow=주문의 요구 능력치가 너무 높습니다.
psi.spellerror.exclusiveparams=두 양립할 수 없는 매개 변수가 설정되었습니다.

# RUNTIME ERRORS
psi.spellerror.position=위치 에러: [%d, %d].
psi.spellerror.dividebyzero=에러: 0으로 나누어짐.
psi.spellerror.nulltarget=에러: 주문의 대상이 존재하지 않습니다.
psi.spellerror.nullvector=에러: 주문의 벡터가 존재하지 않거나 비어 있습니다.
psi.spellerror.outsideradius=에러: 주문의 대상이 32블럭 범위 밖에 있습니다.
psi.spellerror.outsidetrigdomain=ERROR: Value is outside inverse trignometric function's domain.
psi.spellerror.bossimmune=에러: 면역된 엔티티나 보스 위에 주문을 시전하는 것이 시도되었습니다.
psi.spellerror.nocad=에러: 시전자가 CAD를 가지고 있지 않습니다.
psi.spellerror.memoryoutofbounds=에러: 존재하지 않는 메모리 슬롯입니다.
psi.spellerror.lockedmemory=에러: 메모리 슬롯이 잠겨 있습니다.
psi.spellerror.immunetarget=에러: 대상 엔티티가 면역된 엔티티이거나 보스입니다.
psi.spellerror.negativenumber=에러: 음수이면 안 될 대상 숫자가 음수입니다.

# PIECE GROUPS
psi.introduction=Welcome to Psi, the best spell programming magic tech mod in this side of the universe. Please keep in mind that having Just Enough Items (JEI) or some other method of looking up recipes is essential for playing with Psi, as recipes are not included in this guide. In order to get started spellslinging, you'll need some Psidust. To get Psidust, you need to start by crafting a CAD Assembler and an Iron CAD Assembly. Place down the CAD Assembler and put the Iron CAD Assembly in it to construct a very barebones Casting Assistance Device (CAD). From there, drop some Redstone Dust in the world. Equip your CAD, point at the dropped items and right click to make your Psidust.
psi.levelskip=Psi has found save data from a previous world.<br>Would you like to load it?<br><br>If you choose to load it, you'll be taken instantly to Level %d. Otherwise, this message won't show up again this session.
psi.piecegroup.tutorial1=Tutorial 1
psi.piecegroup.tutorial1.desc=Welcome to the leveling menu, it looks like you've gotten acquainted with your brand new CAD. This menu serves as your school for the mod, and this is your first tutorial! Don't worry, this is the longest one, as it has to teach you the basics. To get started programming spells you'll need a Spell Programmer. To run your spells, you'll also need a better CAD than the one you have right now, one with all the components. Look up all the various CAD components (Assembly, Core, Socket, Battery, and optionally, Colorizer) and create one. You don't have to make another Assembly, you can put your current CAD (that is effectively just an Assembly) in your crafting grid to revert it to an Assembly.<br><br>Lastly, Spells also need to be put into Spell Bullets, so make yourself all of that stuff and let's get rolling.<br><br>After you're set with all you need. Open up your Spell Programmer by right clicking it. You'll see a large grid. This is where the magic happens. The programming system is less of a traditionally complex programming system, and more of a simple sequence of actions. To add a piece to the grid, right click any part of it, and select from the pieces that come up.<br><br>As you can see at the bottom, you have two available pieces. Once you have more, you'll be able to assemble them to create spells in a myriad of different ways, but for now, let's just focus on these two. The pieces you have available are the "Selector: Caster" and the "Trick: Debug". Tricks are the most important part of a spell, they are the means through which the spell interacts with the world. In our case, the Debug trick is an exception, as it just writes a value to the player's chat.<br><br>Start off by placing them in your grid adjacent to eachother. When you left click on your "Selector: Caster", you'll find that nothing special happens. However, when you do the same for your "Trick: Debug", a panel appears on the left where you can configure the inputs of this piece, the piece's "parameters". Parameters are info that goes to the piece, in order to allow it to do it's thing. Our Debug trick sends out something to chat, so we need to know what that thing is. Take the Target parameter, and click one of the arrows, so that your "Selector: Caster" looks like it's pointing towards the "Trick: Debug". If you hold Shift while looking at a piece, you can see what types of parameters it needs or what type it sends out. This is useful, so you can pair the right pieces together. Ignore the Number parameter for now, we'll cover it later.<br><br>If you've done this correctly, you should see the X on the top turns into a checkmark, and some values appear on the right. Don't worry about those for now. If you're still seeing the red X, hover over it to see what the error is and try to correct it.<br><br>Now we need to take the program you've made and send it over to your CAD. Grab your Spell Bullet and right click your Spell Programmer with it. You'll hear a beep boop, and are now ready to load the bullet. Place your new CAD into your Assembler, into the big slot on the top-left, and you'll see some slots below it open up. Place your bullet in there, then you can take your CAD out. To pick a spell, hold your CAD and hold the same key you use to access this menu. NOTE: You may only have a single CAD on you. If you have more than one in your inventory, spells will not work.<br><br>In order to level up, you need to create and cast a spell that contains the piece highlighted in red on the last thing you've learned. In our case, we need a spell with a "Trick: Debug" to be able to level up. Right click your CAD with your bullet loaded and you should be ready to move on. If you want to create more Psidust, simply pick a slot that has no bullet in it.
psi.piecegroup.tutorial2=Tutorial 2
psi.piecegroup.tutorial2.desc=Let's talk about the "Number" parameter we saw last time. You'll notice that parameter has an extra option in the center. That means the parameter is optional. By selecting the center, you can disable it.<br><br>In our case, the "Number" parameter is simply a label of sorts, it can be useful if we have a more complex spell where we have multiple things being sent out to chat. It requires a Number, so let's give it one. We now have access to a "Constant: Number" piece. Add the "Number" parameter to your Debug piece and add a "Constant: Number" piece to your grid and connect it to your Debug piece. You can set the number by clicking on the piece and just typing the number with your keyboard.<br><br>Now that we're dealing with multiple parameters, you can assume that in a more complex grid, not everything will be adjacent just as it currently is. That's where Connectors, another piece introduced here, come in. Connectors do exactly as the name says, and allow a piece to connect to another, they're like a wire. You can put a connector adjacent to a piece, and it'll transfer whatever that piece contains to whatever is on the end of the connector. You can make connectors line up with other connectors if what you need is far away. A single connector line can send the object that points to it to any other pieces that are oriented to tap on to it.<br><br>Remember, to level up, you need to make a spell using the piece highlighted in red, so you need to use your "Constant: Number" piece, preferably alongside the Debug trick from Tutorial 1, but give Connectors a try as well, they'll be very important later!
psi.piecegroup.tutorial3=Tutorial 3
psi.piecegroup.tutorial3.desc=Ok, ok. I know what you're thinking. "This is boring, when do we start doing cool stuff?" Well... now!<br><br>It's time we introduce a Trick that actually does some sort of interaction with the world. Bring in "Trick: Add Motion". This trick, as you'd expect, adds movement to an entity. It takes an Entity, a Vector and a Number Constant. As you should've figured out already, "Selector: Caster" returns an Entity (Player), which, if you'd use with your new "Trick: Add Motion", you could use it to add movement to your player character. The Vector is the direction in which you want the movement to be added, and the Number Constant is the speed you want to apply. Obviously, you can get this number using "Constant: Number".<br><br>We don't have any great tricks up our sleeve to get a vector for the trick, but we do have "Operator: Entity Look", which gets us a vector corresponding to the direction the player is looking. If we pass that into our "Trick: Add Motion", the player character will move in the direction they're looking. As for the number, go with 3 for now. You can change it of course, but 3 is a good one.You'll notice that when you modify the value of the constant, the numbers on the right change. These numbers are relevant now. They are the stats of your spell. The stats of your spell match up to those of your CAD, and if any of your spell's stats are below the stats of your CAD, you won't be able to cast the spell.<br><br>From the top to bottom, the stats are as follows:<br>&nComplexity&r: The amount of actions your spell has. Constants, connectors and Debug Tricks aren't counted.<br>&nPotency&r: The power of your spell. As you increase the power of your tricks, this goes up.<br>&nCost&r: The amount of Psi (the energy bar on the right of your screen) your spell is going to consume. This doesn't match up to any CAD stat, but is affected by the CAD's Efficiency. The actual value that is consumed is the one inside parenthesis. The higher the Efficiency of your CAD, the less extra you'll have to pay.<br>&nProjection&r: The amount of Tricks in your spell. Debug Tricks aren't counted.<br>&nBandwidth&r: The width or height of your spell, whichever is the highest. If you find you're going over this, try making your spell more compact.
psi.piecegroup.tutorial4=Tutorial 4
psi.piecegroup.tutorial4.desc=Do you like explosions? Of course you do. Let's make a spell that explodes the block the player is looking at.<br><br>For this, we are going to need "Trick: Explode". This takes a Vector and a Number Constant. Similarly to our "Trick: Add Motion", this constant is the power of the trick. The vector is where you want the explosion to happen. We already used "Operator: Entity Look", but that gives us a vector that's very short. If we used that, the explosion would happen in our face! Instead, we want to use an "Operator: Vector Raytrace".<br><br>This operator takes a position and a ray, both Vectors. From the position, which will be the player's position, acquirable through "Operator: Entity Position", the operator extends the "Ray" parameter vector until it collides with a block in the world. (Note: "Operator: Entity Position" returns a vector whose Y value is 1.6 higher than usual if used on a player.)<br>Therefore, if we use it alongside "Operator: Entity Look", we can find out where the player is looking at and create our explosion there.One thing we have to keep in mind is the fact that spells are to a range of 32 blocks from their focal point, in our case, the player casting the spell. Our explosion can't be farther than 32 blocks away from the player.<br><br>Lastly, the "Error Suppressor" piece does exactly as it describes. If something goes wrong while casting your spell, you'll get an error in your chat telling you what went wrong. Sometimes that can get annoying, when you know a spell has a possible failiure state. In that case. throw in an "Error Suppressor" anywhere in your spell's grid and all the errors will be gone.<br><br>This will be your last basic tutorial, from here you'll be able to pick between various things to pick as you level up. Have fun!
psi.piecegroup.numbersIntro=Numbers 101
psi.piecegroup.numbersIntro.desc=Numbers are an essential component to Spell Programming. These are basic arithmetic operators that can be used for math in spells.<br><br>If you don't have anything that uses numbers yet, try adding up two constants for a Debug trick.<br><br>Make sure to take note the difference between "Number" and "Number Constant" when holding Shift on any spell piece. A parameter that requires a "Number Constant" can't take a "Number", but a parameter that requires a "Number" can take a "Number" or a "Number Constant". 
psi.piecegroup.vectorsIntro=Vectors 101
psi.piecegroup.vectorsIntro.desc=Vectors are an essential component to Spell Programming. Many vectorial operations here included are very elementary, such as sum or subtraction. The red piece of this set, "Operator: Vector Construct" creates a Vector given the X, Y and Z coordinates. Try using it with "Trick: Add Motion" to make a spell that makes you jump up.<br><br>Regarding another complicated piece in this group: A Cross Product of two vectors is a vector that is perpendicular to both. You can make use of this to get a vector that goes to the player's side, by executing the Cross Product of the player's look vector and (0, 1, 0), which you can get with "Operator: Vector Construct". 
psi.piecegroup.entitiesIntro=Entities 101
psi.piecegroup.entitiesIntro.desc=Entities are an essential component to Spell Programming. While using components like "Selector: Caster" it's possible to get the person casting the spell, the pieces included here allow for targeting other entities in the world.<br><br>You can make use of the pieces here to create spells that affect other entities. Try using it with "Trick: Add Motion" on them instead of yourself.
psi.piecegroup.projectiles=Alternative Casting
psi.piecegroup.projectiles.desc=Aside from the standard Spell Bullets, alternate spell bullets can be created, that allow for spells to be casted in different ways.<br><br>Projectile Spell Bullets, instead of casting the spell straight away, emit a projectile, that casts the spell upon colliding with something. Grenade Spell Bullets function similarly to the Projectile ones, but create a "grenade" style projectile that is affected by gravity and explodes (casting the spell) after 3 seconds of being fired. Charge Spell Bullets work like the Grenade ones, but will only cast the spell when ignited by a Spell Detonator item. Mine Spell Bullets also work like the Grenade ones, and will cast the spell once an entity walks into them and walks out. Circle Spell Bullets create a Spell Circle where the caster is looking, the spell is cast on the position of the spell circle 20 times over the course of 5 seconds.<br><br>The usage of alternative bullets like these requires the introduction of the "Selector: Focal Point" piece, which selects the Focal Point of the spell. For normal Spell Bullets, the Focal Point is the player itself, whereas for Projectile (or any of the derivate) Spell Bullets, the Focal Point is the projectile entity. Naturally, for Circle Spell Bullets, the Focal Point will be the spell circle. "Selector: Caster" always remains unchanged.<br><br>The 32 block limit on spells exists around the Focal Point, so these alternate spell bullets bullets allow for spell effects to happen farther away. Furthermore, a spell can always affect its Caster, even if the Caster is outside the 32 block radius of the Focal Point. The Spell Detonator item can only detonate charges in a 32 block radius.<br><br>The other piece of the group, "Selector: Ruler Vector" is to be used with a Vector Ruler. This item allows you to define a vector in world. Shift-right click a block to set the source and normal right click another to set the destination. When you use the selector, it gets the vector you selected. In the case that you have multiple Vector Rulers on you, the first one is used, hotbar taking priority.
psi.piecegroup.blockWorks=Blockworks
psi.piecegroup.blockWorks.desc=Working with blocks is an essential skill. As blocks are aligned to a grid in the world, you can refer to a block's position via a Vector, so knowledge of the Vector concepts is rather important for understanding the contents of Blockworks.<br><br>Two of the most basic pieces in this group are the "Place Block" and "Break Block" Tricks. They take a Vector and either place, and break a block in the position respective to it. For the case of "Trick: Place Block", the block placed is the one to the right of the player's CAD, on the hotbar. Of course, one of those blocks is taken from the player's inventory. Knowing where to place or break a block is easy, as it can be done through "Operator: Vector Raycast".<br><br>There is something we have to keep in mind, however. A standard implementation of "Operator: Vector Raycast" gives us the block the player is looking at, we can't place a block there, as one already exists! To remedy that, we can combine our "Operator: Vector Raycast" with the new "Operator: Vector Axis Raycast" piece, which gives us a vector equivalent to the side of the block we're looking at, so if we're looking at the top of the block, it'll give us a axial vector (0, 1, 0). We can then sum that, using "Operator: Vector Sum" to the result of our raycast to get where to place our block!<br><br>In a similar fashion, "Operator: Entity Axial Look" gets an axial vector equivalent to the axis the player is looking at. Think of the "Facing" value in your F3 menu. "Operator: Entity Axial Look" does something similar. Say "Facing" would say "east", then "Operator: Entity Axial Look" would get you a vector (1, 0, 0). This, unlike the "Facing" value also detects when you're looking up and down.<br><br>The other two tricks available here are "Trick: Place Block Sequence" and "Trick: Break Block Sequence", the latter being the red piece for this group. These tricks break or place a line of blocks. Similarly to the standard break and place tricks, they require a position to start off, but they also require another Vector, "Target", that defines the line in which it should interact. So if "Target" is (0, 4, 0), it'll place or break 4 blocks up, starting from the value of "Position". The last component to these tricks is "Max", this is a number constant for the maximum amount of blocks the trick is allowed to break or place. Since the vector requirements aren't constant, this works as means of calculating the Potency and Cost of the trick. The higher you set it, the more the spell will cost.<br><br>The last piece in this group is "Operator: Vector Project". Vector Projection is a somewhat complex topic, so this will only explain one of the potential uses for it, that being projecting a vector onto an axis. Imagine you want to make a spell that places blocks from your position in the world to the position you're looking at, but in a straight line aligned to the side of the block you're lookig at (using "Operator: Vector Axis Raycast"). You start off by getting the vector that you want to place blocks on, for using "Trick: Place Block Sequence", but if you're diagonal to the block, you may get something like (3, 2, 4). That's not a straight line! We can use "Operator: Vector Project" to project that into the axis of the side you're looking at, say, (0, 0, 1). So our "Vector A" is (3, 2, 4) and our "Vector B" is (0, 0, 1). Applying the projection leaves us with (0, 0 4). If our "Vector B", was, for example, (1, 0, 0), we'd get (3, 0, 0). For the case where an axial vector is used in B, Vector Projection strips any parts of A that are 0 in B. We can then do our straight line.<br><br>As the red piece in this group is "Trick: Break Block Sequence", you won't need anything too crazy for the most part. Try making a spell that brings down an 8 block high column, so you can "treecapitate".
psi.piecegroup.infusion=Psimetal Infusion
psi.piecegroup.infusion.desc=Psimetal is an important component to creating Casting Assistance Devices with better Psi conduction. The "Trick: Infusion" piece executes a release of psionic energy similar to that of a cast with no bullets, except more concentrated and focused.<br><br>The piece takes no parameters, and functions the exact same manner as infusing Redstone to create Psidust does. To infuse Psimetal, drop Gold Ingots around, and cast a spell with "Trick: Infuse".<br><br>Psimetal can not only be used to create more powerful CAD components, but also to create Spell Drives. Spell Drives function as a method of storing and transporting spells between various Programmer blocks. To write a Spell onto a Spell Drive, simply shift-right click it on the Spell Programmer. After the drive has a spell, doing the same thing will set the spell on the programmer instead. To remove the spell from the drive, shift-right click the air.<br><br>Lastly, Spell Drives can be copied by placing an empty one and a written one together in a crafting grid.  
psi.piecegroup.movement=Movement Advances
psi.piecegroup.movement.desc=Movement and transport is a topic already addressed via the usage of "Trick: Add Motion". This group includes pieces that improve on that concept.<br><br>"Trick: Blink" is the red piece of this group, and all it does is simply teleport the target entity wherever they're looking at forwards by the constant value passed in. A negative value will teleport the entity backwards. "Trick: Mass Blink" does the same as "Trick: Blink", but focused on an Entity List, having all of them be affected by the trick.<br><br>"Trick: Mass Add Motion" is self-explanatory, it's an Entity List version of "Trick: Add Motion", adding the same motion to every entity in the list.<br><br>Lastly, "Trick: Mass Exodus" moves every entity in an Entity List to a given position, with the given speed. Negative speed will move them away.
psi.piecegroup.loopcasting=Loopcasting
psi.piecegroup.loopcasting.desc=Loopcasting is a style of magic defined by the usage of Loopcast Spell Bullets. When a spell is cast from a Loopcast Spell Bullet, it executes as if it was cast from a normal one, but also puts the player into a "loopcasting" state, where, until they unequip their CAD, will continuously cast the same spell at a rate of 4 times a second. The advantage of loopcasting is the fact that the initial cooldown to psi regeneration is only applied on the first spell in full. For each subsequent cast, the cooldown will be much shorter than usual, so, given a caster with a high enough level to sustain psi regeneration to cover the cost of a spell, said spell can be endlessly loopcasted.<br><br>The red piece of this group is "Selector: Loopcast Index". This piece selects the amount of times a spell has been loopcasted. For the initial cast this will be 0, and will be incremented once for every subsequent loopcast. This can be used alongside "Operator: Modulus" and "Operator: Integer Division" to alter how the spell functions every time it's cast.<br><br>"Operator: Integer Division" does exactly as it says on the tin, and executes division of the integer parts of the two numbers. "Operator: Modulus" calculates the remainer of the division of the integer parts of the two numbers. Using these pieces, it's possible to do things such as digging undergound bunkers in any given size.<br><br>"Selector: Loopcast Index" also works with Circle Spell Bullets, returning the amount of times the spell has been cast by the spell circle, up to 20. 
psi.piecegroup.blockMovement=Block Movement
psi.piecegroup.blockMovement.desc=The ability to move blocks isn't as important as the ability to break and place them, but under some cases can come in handy.<br><br>The red piece of this group, "Trick: Move Block" takes a position for a block in the world and moves it given the target vector. The target vector must be axial, if it isn't, the trick will fail.<br><br>The other piece, "Trick: Collapse Block", simply collapses a block as if it were sand or gravel.<br><br>Both these tricks will fail on complex blocks (also known as Tile Entities) or blocks that can't be harvested with Silk Touch.
psi.piecegroup.elementalArts=Elemental Arts
psi.piecegroup.elementalArts.desc=What is a system that allows for manipulation of the world's properties if it didn't include some good old fashioned elemental themed magic?<br><br>This group contains Tricks for the four elements. The red piece of this group is "Trick: Smite", which creates a lightning bolt at the position passed in. The other tricks also do things of the sort.<br><br>The group also contains "Operator: Random", a piece that will generate a random number between 0 (inclusive) and the number passed in (exclusive). This can be used alongside Loopcast or Spell Circle spells in many ways. For example, one can create a spell that would use "Trick: Overgrow" to mass bone meal a plantation.
psi.piecegroup.greaterInfusion=Greater Infusion
psi.piecegroup.greaterInfusion.desc=The ability to infuse Diamonds into Psigems is very important in the progress of spellslinging. Using Psigems, stronger CAD components can be created. Similarly to "Trick: Infusion", "Trick: Greater Infusion" will infuse nearby Diamonds, turning them into Psigems.<br><br>Furthermore, "Trick: Ebony And Ivory" will infuse Coal into an Ebony Substance and Nether Quartz into an Ivory Substance, both of which can be combined with a Psimetal Ingot to create the respective alloy. These alloys can later be used to create stronger CAD Assemblies. "Trick: Ebony And Ivory" can only be used while in the End. 
psi.piecegroup.toolCasting=Tool Casting
psi.piecegroup.toolCasting.desc=Psimetal and Psigems can be crafted into a Toolset: Shovel, Pickaxe, Axe and Sword.<br><br>These tools can be socketed with up to 3 Spell Bullets. When their relative action is executed, that being breaking a block for tools or attacking a mob for the sword, the selected spell is activated. The spell in a Psimetal tool is selected the same way as a CAD. A fourth slot is also shown in the radial menu in case one wants to disable the tool's spells entirely. Psimetal tools will slowly regenerate and restore their damage using the player's Psi energy, in bursts, as long as the tool isn't the item currently in the player's hand.<br><br>Spells in a tool aren't casted by the tool, but rather by the CAD, therefore, the limitations imposed by the CAD's stats still stand.<br><br>This group introduces a few pieces that can be used in conjuction with the tools. The red piece of this group, "Selector: Block Broken" is meant to be used with tools, and gets you a vector respective to where you broke the block in the world. "Selector: Block Broken Side" gets the side in which you broke that block.<br><br>Lastly "Selector: Attack Target" does exactly as it sounds, it gets you the entity you attacked with a sword when the spell is casted. It can also be used with Projectile Spell Bullets, to get the entity that the projectile collided against, if any.
psi.piecegroup.positiveEffects=Positive Effects
psi.piecegroup.positiveEffects.desc=The ability to apply effects to entities is a must of any magical spellbook worth its weight. Luckily, you are not making spells with a spellbook, but you can still apply effects anyway.<br><br>All of the pieces in this group will apply the respective potion effect to the target entity, for the target time (in seconds). If the piece also has a Power parameter, that defines the level of the effect to apply.<br><br>So, for example, "Trick: Speed" with Time 20 and Power 2 would apply a Spell II effect for 20 seconds to the target entity.
psi.piecegroup.negativeEffects=Negative Effects
psi.piecegroup.negativeEffects.desc=As to be expected, after Positive Effects come Negative Effects.<br><br>There isn't much to say here, really. Everything in this group works exactly as expected. Have fun.
psi.piecegroup.exosuitCasting=Exosuit Casting
psi.piecegroup.exosuitCasting.desc=Naturally the method of casting following a tool set would be an armor set. You can create the Psimetal Exosuit using... you guessed it, Psimetal, as well as some Psigems. All the armor pieces of the set can be socketed with bullets, similarly to the Psimetal tools. Each piece handles a given "event", such as taking damage, or jumping. Whenever that event happens, the spell in the selected bullet will be cast.<br><br>The events are as follows:<br>&nHelmet&r: Sensor Based (read on).<br>&nChestplate&r: Player taking damage.<br>&nLeggings&r: Every tick.<br>&nBoots&r: Player jumping.<br><br>The Helmet can have Exosuit Sensors attached to it, by combining the two items in a crafting grid. Only one sensor can be attached at a time. The sensor can be removed by placing the helmet back on the crafting grid. There's a few sensors, such as the Light sensor, that triggers when the player is in low light, or the Stress sensor, that triggers when the player reaches low HP. Check them out at your leisure.<br><br>To control the exosuit, you need to create an Exosuit Controller. This item allows you to modify the selected bullets in each piece directly from your hand. Simply use your typical bullet selection hotkey with it equipped, this brings up a menu with the ability to change multiple slots. Use the left and right mouse buttons to select which item is being changed, it works as usual after that. You can also shift-right click the Exosuit Controller to instantly disable all the effects of your armor.<br><br>Moving on to the pieces. The group contains various selectors you can use to help your Exosuit casting. The red piece of the group is "Selector: Time". This returns the CAD's time, kind of like its "system clock", in ticks. It constantly increments. It can be useful if you want to make something that works differently depending on the time. You don't need an exosuit to use it.<br><br>The other two pieces in the group, "Selector: Attacker" and "Selector: Damage Taken" are to be used with the Exosuit Chestplate. The first selects the entity that attacked you, and the second the amount of damage you took.
psi.piecegroup.trignometry=Trigonometry
psi.piecegroup.trignometry.desc=This group includes operators relevant to trigonometric functions. The red piece of this group: "Constant: Pi" is exactly what it says on the tin, a constant that gives you the value of Pi.<br><br>The group includes elementary trigonometric operations: sin, cos, asin and acos. The latter two being the inverse operators of sin and cos, also known as "sin^-1" or "cos^-1".<br><br>Lastly, "Operator: Vector Dot Product" gives you the Dot Product of two vectors, the product of the two vectors' magnitudes and the cosine of the angle between them. Using "Operator: Arc Cosine" on the result will allow you to get the angle between two vectors.
psi.piecegroup.smeltery=Smeltery
psi.piecegroup.smeltery.desc=The pieces included in this group are very simplistic in the way they function, as both revolve around the concept of smelting things into other things as if they were put in a furnace.<br>"Trick: Smelt Item" will smelt a dropped item (Entity) in the world into its smelted counterpart, one item at a time.<br><br>"Trick: Smelt Block" will smelt a block in the world into its smelted version, provided it's also a block. So while Cobblestone may be turned into Stone, Wood can't be turned into Charcoal. 
psi.piecegroup.flowControl=Flow Control
psi.piecegroup.flowControl.desc=Flow Control is a somewhat complex subject. All the pieces here included allow for a spell to function in wildly different manners from what was available in your arsenal before. However, understanding how to properly use these pieces requires knowledge of the very internals of the spellcasting system. There are a few basic rules to be taken in mind to properly understand these concepts:<br>1. Spells execute in the order that the arrows drawn in the Spell Programmer point towards.<br>2. Any given piece's value will only be evaulated once. Any further pieces that require its value will just get the value evaluated the first time. For example, 3 instances of "Trick: Debug" pointing to the same "Operator: Random" will all print out the same value, as the random output will only be evaluted once.<br>3. A piece will only be evaluated when another piece requires its value. These chains are triggered by the Trick pieces.<br>4. Tricks are always executed from left to right and top to bottom. Therefore, a Trick in the second row will always be executed after a trick in the first.<br><br>With that in mind, let's start off with the red piece of this group, "Trick: Sleep". This piece causes the spell to delay any further execution for the amount of ticks passed in. Knowing the order in which tricks execute, thanks to rule 4, putting this in the right place shouldn't be too hard. For those unaware, a Tick is a 1/20 fraction of a second. So if you wish to delay further processing of a spell by half a second, you would use 10 as the "Time" parameter. "Trick: Sleep" does not add any Projection to your spell, but does add Potency.<br><br>"Trick: Evaluate" is a trick that does absolutely nothing. Yes, you heard that right. This trick does nothing. It doesn't increment any stats on your spell either. Its only application is to make use of rule 2, and evaluate a value before a Sleep is executed, allowing you to, for example, get the position where an entity was, with "Selector: Entity Position", before the Sleep is applied, for a trick used after said Sleep.<br><br>"Trick: Die" is a Flow Control piece in the proper sense of the term. It takes a simple Number parameter, and if that number lies between -1 (exclusive) and 1 (also exclusive) it'll stop the spell's execution right then and there. Any other values will have the spell continue as usual. This piece doesn't add Projection. A very simple way to put it to use is to utilize "Selector: Sneak Status", which convinentely gives you 0 if the caster is sneaking and 1 if they're not. Almost as if they were made to go together!<br><br>"Constant: Wrapper" allows you to make use of Number type pieces for tricks that would otherwise require a Number Constant. As you should know by now, the constant value given to a trick allows for calculation of the various stats of the spell before you even cast it, this being the normal reason variable numbers can't be fed into a trick. "Constant: Wrapper" requires two numbers, a constant one and a normal one. The constant value given to the piece will be the one used for any statistical calculation, whereas the normal number will be the one used for when the spell is actually put into use. The normal number's value will be capped out at the value of the constant one during spell execution, to prevent any sort of tomfoolery. The normal number is also always converted to a positive or negative number, depending on the sign of the constant number, so that the signs of both numbers match. If the constant number is 0, the result of this evaluation is always 0, regardless of the value of the normal number.
psi.piecegroup.blockConjuration=Block Conjuration
psi.piecegroup.blockConjuration.desc=This group includes pieces that do exactly as advertised, they conjure blocks.<br><br>The red piece of the group, "Trick: Conjure Block" creates a Conjured Block at the given position. A Conjured Block is a semi-transparent, physical block that can, optionally, if the "Time" parameter is specified, disappear from the world after a bit. If the "Time" parameter is used, it's specified in Ticks. For those unaware, a Tick is equivalent to 1/20th of a second, so if you want to make a block that disappears after half a second, set "Time" to 10 ticks.<br><br>"Trick: Conjure Light" conjures a light source instead, one that can't be collided against. "Trick: Conjure Block Sequence" functions much like "Trick: Place Block Sequence", but creates Conjured Blocks instead. Both these pieces also include the very same "Time" parameter.<br><br>The color of the Conjured Blocks created is equal to that of the Colorizer used in the CAD (or the default light blue case none is present). Colorizers whose color changes, such as the Full-Spectrum colorizer will also reflect in the visuals of the Conjured Blocks.
psi.piecegroup.eidosReversal=Eidos Manipulation
psi.piecegroup.eidosReversal.desc=Eidos Spells allow for the caster to manipulate the space-time continuum in their favor.<br><br>The red piece of this group, "Trick: Eidos Reversal" retraces the caster's steps, at double speed, for the amount of time (in seconds) specified. Only one Reversal may be active at a time, and after a Reversal is cast, the effect of any subsequent cast is only available until the point where the last one ended. Sneaking will stop an ongoing Reversal.<br><br>The other trick piece of the group, "Trick: Eidos Anchor" creates an "anchor" effect on the caster. After the target amount of time (in seconds), the caster will be taken back to where their anchor was. Multiple casts of "Trick: Eidos Anchor" can be done, but only the last one will take effect.<br><br>Lastly "Selector: Eidos Changelog" takes a single number parameter (let's call it n), and gives you the position in the n'th index of the Eidos Changelog starting from the end. In simpler terms, it gives you a vector equal to the position that the caster was n ticks ago. Remember that "Trick: Eidos Reversal" takes the caster back in the changelog, wiping out any info that would come after. "Trick: Eidos Anchor" does not modify the changelog.
psi.piecegroup.detectionDynamics=Detection & Focus
psi.piecegroup.detectionDynamics.desc=This group includes two types of pieces, as the title says: detection, and focus. The red piece of the group falls under the "focus" area, however, in order to understand it, the concept of Slot Focus must be introduced.<br><br>An already known example of Slot Focus is the family of Place Block style tricks. These make use of the block directly to the left of your CAD. Slot Focus is the slot which tricks like these will use. It can be relative (to the position of your CAD) or absolute, can only be in the hotbar and goes from 1 to 9. By default, whenever a spell is cast, it's value is "Relative 1", so it's 1 slot to the right of your CAD. If it was "Relative -1" it would be 1 slot to the right of your CAD. "Absolute 3" would be the third slot in your hotbar. It also loops around, so if you have your CAD on your last slot and the value is "Relative 1", it'll be your first slot.<br><br>To set the focused slot, you can use "Trick: Switch Focus Slot", the red piece of this group. This takes one of 2 parameters. Both are optional and mutually exclusive, and if you don't define any, it'll set the focus to the default of "Relative 1". If you choose to set the "Position" parameter, it'll set an Absolute value, whereas the "Shift" parameter will set a Relative value. This allows you to, for example, build things with different blocks based on the circumstance. This trick only works for the current spell cast, and the focus will reset on the next time a spell is cast (even if it's the same spell).<br><br>The other two pieces in the group are set in the "detection" area. First, "Selector: Item Presence" takes an optional slot number (if not set it'll default to your Focused Slot), and returns the amount of items in that slot, 0 if it's empty, of course. Lastly, "Selector: Block Presence" takes a vector, to be used as coordinates in the world, and finds the block there, the value returned is 0 if there's no block or a replaceable block (like tall grass), 1 if it's a non-solid block and 2 if it's a solid block.
psi.piecegroup.memoryManagement=Memory Management
psi.piecegroup.memoryManagement.desc=This group introduces the ability for spells to harness Persistent Memory in one's CAD. A CAD can store Vector type values for use in future spellcasts. The amount of Vectors that can be stored is equal to the CAD's "Sockets" stat divided by 3, rounded down. This is refered to the amount of Memory Slots present in the CAD.<br><br>The group includes two pieces, simple IO style pieces to read and write vectors to and from the memory. The red piece, "Trick: Save Vector" saves a vector to the target Memory Slot, whereas "Selector: Saved Vector" gets the vector saved in the Memory Slot defined by its only parameter. Memory Slots for these pieces start in 1, so a CAD with 3 memory slots would accept values 1, 2, and 3. Both pieces add Potency to the spell equivalent to the number of the slot used.<br><br>One imperfection with these pieces is the fact that "Trick: Save Vector" "locks" the target Memory Slot when used, preventing any of the two pieces from interacting with that same Memory Slot in the current spell cast after it goes through, be that read or write. So if you need to read the value in the slot before you write something, make sure to keep the fundamental rules of Flow Control in mind, to make sure the read goes through before the write.
psi.piecegroup.secondaryOperators=Secondary Operators
psi.piecegroup.secondaryOperators.desc=As the name implies, this group includes mathematical operators that aren't quite as important as the "primary" ones, such as sum or subtract. This group is, really, just a mixed bag of all sorts of math or logic relates pieces that can be used to help with spell creation. We'll separate the pieces in two sets to make them easier to explain.<br><br>The first set is related to powers. Including pieces like "Operator: Square", "Operator: Power", "Operator: Square Root" and even "Operator: Logarithm". Most of these operate in a pretty standard fashion, with not much to talk about, except "Operator: Logarithm". This piece, as the name implies, executes the logarithm of the number passed in. The piece takes an optional Base paramter, and will calculate the logarithm for that base. If no base is passed in, it'll default to base 10. There's also "Constant: e", if you feel like using that, for whatever reason.<br><br>The second set is related to logic. It includes pieces that do rounding (to an integer), "Operator: Ceiling", "Operator: Floor" and "Operator Round", which respectively round up, round down and round depending on the fractional part of the number. It also includes "Operator: Min" and "Operator: Max". These are pretty simple. They, respectively, get the smallest number and the largest number between the various numbers passed in.